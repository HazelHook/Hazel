/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/add_ons": {
    /**
     * List all add-ons
     * @description This endpoint is used to list all existing add-ons.
     */
    get: operations["findAllAddOns"];
    /**
     * Create an add-on
     * @description This endpoint is used to create an add-on that can be then attached to a one-off invoice.
     */
    post: operations["createAddOn"];
  };
  "/add_ons/{code}": {
    /**
     * Retrieve an add-on
     * @description This endpoint is used to retrieve a specific add-on.
     */
    get: operations["findAddOn"];
    /**
     * Update an add-on
     * @description This endpoint is used to update an existing add-on.
     */
    put: operations["updateAddOn"];
    /**
     * Delete an add-on
     * @description This endpoint is used to delete an existing add-on.
     */
    delete: operations["destroyAddOn"];
    parameters: {
      path: {
        /** @description Unique code used to identify the add-on. */
        code: string;
      };
    };
  };
  "/applied_coupons": {
    /**
     * List all applied coupons
     * @description This endpoint is used to list all applied coupons. You can filter by coupon status and by customer.
     */
    get: operations["findAllAppliedCoupons"];
    /**
     * Apply a coupon to a customer
     * @description This endpoint is used to apply a specific coupon to a customer, before or during a subscription.
     */
    post: operations["applyCoupon"];
  };
  "/billable_metrics": {
    /**
     * List all billable metrics
     * @description This endpoint retrieves all existing billable metrics that represent pricing components of your application.
     */
    get: operations["findAllBillableMetrics"];
    /**
     * Create a billable metric
     * @description This endpoint creates a new billable metric representing a pricing component of your application.
     */
    post: operations["createBillableMetric"];
  };
  "/billable_metrics/{code}": {
    /**
     * Retrieve a billable metric
     * @description This endpoint retrieves an existing billable metric that represents a pricing component of your application. The billable metric is identified by its unique code.
     */
    get: operations["findBillableMetric"];
    /**
     * Update a billable metric
     * @description This endpoint updates an existing billable metric representing a pricing component of your application.
     */
    put: operations["updateBillableMetric"];
    /**
     * Delete a billable metric
     * @description This endpoint deletes an existing billable metric representing a pricing component of your application.
     */
    delete: operations["destroyBillableMetric"];
    parameters: {
      path: {
        /** @description Code of the existing billable metric. */
        code: string;
      };
    };
  };
  "/billable_metrics/{code}/groups": {
    /**
     * Find a billable metric's groups
     * @description This endpoint retrieves all groups for a billable metric.
     */
    get: operations["findAllBillableMetricGroups"];
  };
  "/coupons": {
    /**
     * List all coupons
     * @description This endpoint is used to list all existing coupons.
     */
    get: operations["findAllCoupons"];
    /**
     * Create a coupon
     * @description This endpoint is used to create a coupon that can be then attached to a customer to create a discount.
     */
    post: operations["createCoupon"];
  };
  "/coupons/{code}": {
    /**
     * Retrieve a coupon
     * @description This endpoint is used to retrieve a specific coupon.
     */
    get: operations["findCoupon"];
    /**
     * Update a coupon
     * @description This endpoint is used to update a coupon that can be then attached to a customer to create a discount.
     */
    put: operations["updateCoupon"];
    /**
     * Delete a coupon
     * @description This endpoint is used to delete a coupon.
     */
    delete: operations["destroyCoupon"];
    parameters: {
      path: {
        /** @description Unique code used to identify the coupon. */
        code: string;
      };
    };
  };
  "/credit_notes": {
    /**
     * List all credit notes
     * @description This endpoint list all existing credit notes.
     */
    get: operations["findAllCreditNotes"];
    /**
     * Create a credit note
     * @description This endpoint creates a new credit note.
     */
    post: operations["createCreditNote"];
  };
  "/credit_notes/{lago_id}": {
    /**
     * Retrieve a credit note
     * @description This endpoint retrieves an existing credit note.
     */
    get: operations["findCreditNote"];
    /**
     * Update a credit note
     * @description This endpoint updates an existing credit note.
     */
    put: operations["updateCreditNote"];
    parameters: {
      path: {
        /** @description The credit note unique identifier, created by Lago. */
        lago_id: string;
      };
    };
  };
  "/credit_notes/{lago_id}/download": {
    /**
     * Download a credit note PDF
     * @description This endpoint downloads the PDF of an existing credit note.
     */
    post: operations["downloadCreditNote"];
  };
  "/credit_notes/{lago_id}/void": {
    /**
     * Void a credit note
     * @description This endpoint voids an existing credit note.
     */
    put: operations["voidCreditNote"];
  };
  "/customers": {
    /**
     * List all customers
     * @description This endpoint retrieves all existing customers.
     */
    get: operations["findAllCustomers"];
    /**
     * Create a customer
     * @description This endpoint creates a new customer.
     */
    post: operations["createCustomer"];
  };
  "/customers/{external_id}": {
    /**
     * Retrieve a customer
     * @description This endpoint retrieves an existing customer.
     */
    get: operations["findCustomer"];
    /**
     * Delete a customer
     * @description This endpoint deletes an existing customer.
     */
    delete: operations["destroyCustomer"];
    parameters: {
      path: {
        /** @description External ID of the existing customer */
        external_id: string;
      };
    };
  };
  "/customers/{external_customer_id}/applied_coupons/{applied_coupon_id}": {
    /**
     * Delete an applied coupon
     * @description This endpoint is used to delete a specific coupon that has been applied to a customer.
     */
    delete: operations["deleteAppliedCoupon"];
  };
  "/customers/{external_customer_id}/portal_url": {
    /**
     * Get a customer portal URL
     * @description Retrieves an embeddable link for displaying a customer portal.
     *
     * This endpoint allows you to fetch the URL that can be embedded to provide customers access to a dedicated portal
     */
    get: operations["getCustomerPortalUrl"];
  };
  "/customers/{external_customer_id}/current_usage": {
    /**
     * Retrieve customer current usage
     * @description This endpoint enables the retrieval of the usage-based billing data for a customer within the current period.
     */
    get: operations["findCustomerCurrentUsage"];
  };
  "/customers/{external_customer_id}/past_usage": {
    /**
     * Retrieve customer past usage
     * @description This endpoint enables the retrieval of the usage-based billing data for a customer within past periods.
     */
    get: operations["findAllCustomerPastUsage"];
  };
  "/events": {
    /**
     * Send usage events
     * @description This endpoint is used for transmitting usage measurement events to either a designated customer or a specific subscription.
     */
    post: operations["createEvent"];
  };
  "/events/batch": {
    /**
     * Batch multiple events
     * @deprecated
     * @description This endpoint is used for transmitting a batch of usage measurement events to multiple subscriptions for a single customer.
     */
    post: operations["createBatchEvents"];
  };
  "/events/estimate_fees": {
    /**
     * Estimate fees for a pay in advance charge
     * @description Estimate the fees that would be created after reception of an event for a billable metric attached to one or multiple pay in advance charges
     */
    post: operations["eventEstimateFees"];
  };
  "/events/{transaction_id}": {
    /**
     * Retrieve a specific event
     * @description This endpoint is used for retrieving a specific usage measurement event that has been sent to a customer or a subscription.
     */
    get: operations["findEvent"];
    parameters: {
      path: {
        /** @description This field represents the unique identifier sent for this specific event. */
        transaction_id: string;
      };
    };
  };
  "/fees": {
    /**
     * List all fees
     * @description This endpoint is used for retrieving all fees that has been issued.
     */
    get: operations["findAllFees"];
  };
  "/fees/{lago_id}": {
    /**
     * Retrieve a specific fee
     * @description This endpoint is used for retrieving a specific fee that has been issued.
     */
    get: operations["findFee"];
    /**
     * Update a fee
     * @description This endpoint is used for updating a specific fee that has been issued.
     */
    put: operations["updateFee"];
    parameters: {
      path: {
        /** @description Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the feeâ€™s record within the Lago system. */
        lago_id: string;
      };
    };
  };
  "/invoices": {
    /**
     * List all invoices
     * @description This endpoint is used for retrievign all invoices.
     */
    get: operations["findAllInvoices"];
    /**
     * Create a one-off invoice
     * @description This endpoint is used for issuing a one-off invoice.
     */
    post: operations["createInvoice"];
  };
  "/invoices/{lago_id}": {
    /**
     * Retrieve an invoice
     * @description This endpoint is used for retrieving a specific invoice that has been issued.
     */
    get: operations["findInvoice"];
    /**
     * Update an invoice
     * @description This endpoint is used for updating an existing invoice.
     */
    put: operations["updateInvoice"];
    parameters: {
      path: {
        lago_id: components["parameters"]["lago_invoice_id"];
      };
    };
  };
  "/invoices/{lago_id}/download": {
    /**
     * Download an invoice PDF
     * @description This endpoint is used for downloading a specific invoice PDF document.
     */
    post: operations["downloadInvoice"];
  };
  "/invoices/{lago_id}/finalize": {
    /**
     * Finalize a draft invoice
     * @description This endpoint is used for finalizing a draft invoice.
     */
    put: operations["finalizeInvoice"];
  };
  "/invoices/{lago_id}/refresh": {
    /**
     * Refresh a draft invoice
     * @description This endpoint is used for refreshing a draft invoice.
     */
    put: operations["refreshInvoice"];
  };
  "/invoices/{lago_id}/retry_payment": {
    /**
     * Retry an invoice payment
     * @description This endpoint resends an invoice for collection and retry a payment.
     */
    post: operations["retryPayment"];
  };
  "/organizations": {
    /**
     * Update your organization
     * @description This endpoint is used to update your own organization's settings.
     */
    put: operations["updateOrganization"];
  };
  "/plans": {
    /**
     * List all plans
     * @description This endpoint retrieves all existing plans.
     */
    get: operations["findAllPlans"];
    /**
     * Create a plan
     * @description This endpoint creates a plan with subscription and usage-based charges. It supports flexible billing cadence (in-advance or in-arrears) and allows for both recurring and metered charges.
     */
    post: operations["createPlan"];
  };
  "/plans/{code}": {
    /**
     * Retrieve a plan
     * @description This endpoint retrieves a specific plan.
     */
    get: operations["findPlan"];
    /**
     * Update a plan
     * @description This endpoint updates a specific plan with subscription and usage-based charges. It supports flexible billing cadence (in-advance or in-arrears) and allows for both recurring and metered charges.
     */
    put: operations["updatePlan"];
    /**
     * Delete a plan
     * @description This endpoint deletes a specific plan. Note that this plan could be associated with active subscriptions.
     */
    delete: operations["destroyPlan"];
    parameters: {
      path: {
        /** @description The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance. */
        code: string;
      };
    };
  };
  "/subscriptions": {
    /**
     * List all subscriptions
     * @description This endpoint retrieves all active subscriptions.
     */
    get: operations["findAllSubscriptions"];
    /**
     * Assign a plan to a customer
     * @description This endpoint assigns a plan to a customer, creating or modifying a subscription. Ideal for initial subscriptions or plan changes (upgrades/downgrades).
     */
    post: operations["createSubscription"];
  };
  "/subscriptions/{external_id}": {
    /**
     * Retrieve a subscription
     * @description This endpoint retrieves a specific subscription.
     */
    get: operations["findSubscription"];
    /**
     * Update a subscription
     * @description This endpoint allows you to update a subscription.
     */
    put: operations["updateSubscription"];
    /**
     * Terminate a subscription
     * @description This endpoint allows you to terminate a subscription.
     */
    delete: operations["destroySubscription"];
    parameters: {
      path: {
        /** @description External ID of the existing subscription */
        external_id: string;
      };
    };
  };
  "/taxes": {
    /**
     * List all taxes
     * @description This endpoint retrieves all existing taxes representing a customizable tax rate applicable to either the organization or a specific customer.
     */
    get: operations["findAllTaxes"];
    /**
     * Create a tax
     * @description This endpoint creates a new tax representing a customizable tax rate applicable to either the organization or a specific customer.
     */
    post: operations["createTax"];
  };
  "/taxes/{code}": {
    /**
     * Retrieve a Tax
     * @description This endpoint retrieves an existing tax representing a customizable tax rate applicable to either the organization or a specific customer. The tax is identified by its unique code.
     */
    get: operations["findTax"];
    /**
     * Update a tax
     * @description This endpoint updates an existing tax representing a customizable tax rate applicable to either the organization or a specific customer.
     */
    put: operations["updateTax"];
    /**
     * Delete a tax
     * @description This endpoint is used to delete a tax.
     */
    delete: operations["destroyTax"];
    parameters: {
      path: {
        /** @description The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes. */
        code: string;
      };
    };
  };
  "/wallets": {
    /**
     * List all wallets
     * @description This endpoint is used to list all wallets with prepaid credits.
     */
    get: operations["findAllWallets"];
    /**
     * Create a wallet
     * @description This endpoint is used to create a wallet with prepaid credits.
     */
    post: operations["createWallet"];
  };
  "/wallets/{lago_id}": {
    /**
     * Retrieve a wallet
     * @description This endpoint is used to retrieve an existing wallet with prepaid credits.
     */
    get: operations["findWallet"];
    /**
     * Update a wallet
     * @description This endpoint is used to update an existing wallet with prepaid credits.
     */
    put: operations["updateWallet"];
    /**
     * Terminate a wallet
     * @description This endpoint is used to terminate an existing wallet with prepaid credits.
     */
    delete: operations["destroyWallet"];
    parameters: {
      path: {
        /** @description Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the walletâ€™s record within the Lago system. */
        lago_id: string;
      };
    };
  };
  "/wallet_transactions": {
    /**
     * Top up a wallet
     * @description This endpoint is used to top-up an active wallet.
     */
    post: operations["createWalletTransaction"];
  };
  "/wallets/{lago_id}/wallet_transactions": {
    /**
     * List all wallet transactions
     * @description This endpoint is used to list all wallet transactions.
     */
    get: operations["findAllWalletTransactions"];
  };
  "/webhooks/public_key": {
    /**
     * Retrieve webhook public key
     * @description This endpoint is used to retrieve the public key used to verify the webhooks signature
     */
    get: operations["fetchPublicKey"];
  };
  "/webhook_endpoints": {
    /**
     * List all webhook endpoints
     * @description This endpoint is used to list all webhook endpoints.
     */
    get: operations["findAllWebhookEndpoints"];
    /**
     * Create a webhook_endpoint
     * @description This endpoint is used to create a webhook endpoint.
     */
    post: operations["createWebhookEndpoint"];
  };
  "/webhook_endpoints/{lago_id}": {
    /**
     * Retrieve a webhook endpoint
     * @description This endpoint is used to retrieve an existing webhook endpoint.
     */
    get: operations["findWebhookEndpoint"];
    /**
     * Update a webhook endpoint
     * @description This endpoint is used to update an existing webhook endpoint.
     */
    put: operations["updateWebhookEndpoint"];
    /**
     * Delete a webhook endpoint
     * @description This endpoint is used to delete an existing webhook endpoint.
     */
    delete: operations["destroyWebhookEndpoint"];
    parameters: {
      path: {
        /** @description Unique identifier assigned to the webhook endpoint within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the webhook endpoint's record within the Lago system. */
        lago_id: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AddOnBaseInput: {
      /**
       * @description The name of the add-on.
       * @example Setup Fee
       */
      name?: string;
      /**
       * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
       * @example Setup Fee (SF1)
       */
      invoice_display_name?: string;
      /**
       * @description Unique code used to identify the add-on.
       * @example setup_fee
       */
      code?: string;
      /**
       * @description The cost of the add-on in cents, excluding any applicable taxes, that is billed to a customer. By creating a one-off invoice, you will be able to override this value.
       * @example 50000
       */
      amount_cents?: number;
      amount_currency?: components["schemas"]["Currency"];
      /**
       * @description The description of the add-on.
       * @example Implementation fee for new customers.
       */
      description?: string | null;
      /**
       * @description List of unique code used to identify the taxes.
       * @example [
       *   "french_standard_vat"
       * ]
       */
      tax_codes?: string[];
    };
    AddOnCreateInput: {
      add_on: components["schemas"]["AddOnBaseInput"];
    };
    AddOnObject: {
      /**
       * Format: uuid
       * @description Unique identifier of the add-on, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The name of the add-on.
       * @example Setup Fee
       */
      name: string;
      /**
       * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
       * @example Setup Fee (SF1)
       */
      invoice_display_name?: string;
      /**
       * @description Unique code used to identify the add-on.
       * @example setup_fee
       */
      code: string;
      /**
       * @description The cost of the add-on in cents, excluding any applicable taxes, that is billed to a customer. By creating a one-off invoice, you will be able to override this value.
       * @example 50000
       */
      amount_cents: number;
      amount_currency: components["schemas"]["Currency"];
      /**
       * @description The description of the add-on.
       * @example Implementation fee for new customers.
       */
      description?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the add-on was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the add-on was initially created.
       * @example 2022-04-29T08:59:51Z
       */
      created_at: string;
      /** @description All taxes applied to the add-on. */
      taxes?: components["schemas"]["TaxObject"][];
    };
    AddOn: {
      add_on: components["schemas"]["AddOnObject"];
    };
    AddOnsPaginated: {
      add_ons: components["schemas"]["AddOnObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    AddOnUpdateInput: {
      add_on: components["schemas"]["AddOnBaseInput"];
    };
    ApiErrorBadRequest: {
      /**
       * Format: int32
       * @example 400
       */
      status: number;
      /** @example Bad request */
      error: string;
    };
    ApiErrorForbidden: {
      /**
       * Format: int32
       * @example 403
       */
      status: number;
      /** @example Forbidden */
      error: string;
      /** @example feature_unavailable */
      code: string;
    };
    ApiErrorUnauthorized: {
      /**
       * Format: int32
       * @example 401
       */
      status: number;
      /** @example Unauthorized */
      error: string;
    };
    ApiErrorUnprocessableEntity: {
      /**
       * Format: int32
       * @example 422
       */
      status: number;
      /** @example Unprocessable entity */
      error: string;
      /** @example validation_errors */
      code: string;
      error_details: Record<string, never>;
    };
    ApiErrorNotAllowed: {
      /**
       * Format: int32
       * @example 405
       */
      status: number;
      /** @example Method Not Allowed */
      error: string;
      /** @example not_allowed */
      code: string;
    };
    ApiErrorNotFound: {
      /**
       * Format: int32
       * @example 404
       */
      status: number;
      /** @example Not Found */
      error: string;
      /** @example object_not_found */
      code: string;
    };
    AppliedCoupon: {
      applied_coupon: components["schemas"]["AppliedCouponObject"];
    };
    AppliedCouponInput: {
      applied_coupon: {
        /**
         * @description The customer external unique identifier (provided by your own application)
         * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
         */
        external_customer_id: string;
        /**
         * @description Unique code used to identify the coupon.
         * @example startup_deal
         */
        coupon_code: string;
        /**
         * @description The type of frequency for the coupon. It can have three possible values: `once`, `recurring` or `forever`.
         *
         * - If set to `once`, the coupon is applicable only for a single use.
         * - If set to `recurring`, the coupon can be used multiple times for recurring billing periods.
         * - If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.
         * @example recurring
         * @enum {string|null}
         */
        frequency?: "once" | "recurring" | null;
        /**
         * @description Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a `recurring` frequency type
         * @example 3
         */
        frequency_duration?: number | null;
        /**
         * @description The amount of the coupon in cents. This field is required only for coupon with `fixed_amount` type.
         * @example 2000
         */
        amount_cents?: number | null;
        amount_currency?: components["schemas"]["Currency"] & (Record<string, unknown> | null);
        /**
         * @description The percentage rate of the coupon. This field is required only for coupons with a `percentage` coupon type.
         * @example null
         */
        percentage_rate?: string | null;
      };
    };
    AppliedCouponObject: {
      /**
       * Format: uuid
       * @description Unique identifier of the applied coupon, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * Format: uuid
       * @description Unique identifier of the coupon, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_coupon_id: string;
      /**
       * @description Unique code used to identify the coupon.
       * @example startup_deal
       */
      coupon_code: string;
      /**
       * @description The name of the coupon.
       * @example Startup Deal
       */
      coupon_name: string;
      /**
       * Format: uuid
       * @description Unique identifier of the customer, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_customer_id: string;
      /**
       * @description The customer external unique identifier (provided by your own application)
       * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
       */
      external_customer_id: string;
      /**
       * @description The status of the coupon. Can be either `active` or `terminated`.
       * @example active
       * @enum {string}
       */
      status: "active" | "terminated";
      /**
       * @description The amount of the coupon in cents. This field is required only for coupon with `fixed_amount` type.
       * @example 2000
       */
      amount_cents?: number | null;
      /**
       * @description The remaining amount in cents for a `fixed_amount` coupon with a frequency set to `once`. This field indicates the remaining balance or value that can still be utilized from the coupon.
       * @example 50
       */
      amount_cents_remaining?: number | null;
      amount_currency?: components["schemas"]["Currency"] & (Record<string, unknown> | null);
      /**
       * @description The percentage rate of the coupon. This field is required only for coupons with a `percentage` coupon type.
       * @example null
       */
      percentage_rate?: string | null;
      /**
       * @description The type of frequency for the coupon. It can have three possible values: `once`, `recurring` or `forever`.
       *
       * - If set to `once`, the coupon is applicable only for a single use.
       * - If set to `recurring`, the coupon can be used multiple times for recurring billing periods.
       * - If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.
       * @example recurring
       * @enum {string}
       */
      frequency: "once" | "recurring";
      /**
       * @description Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a `recurring` frequency type
       * @example 3
       */
      frequency_duration?: number | null;
      /**
       * @description The remaining number of billing periods to which the coupon is applicable. This field determines the remaining usage or availability of the coupon based on the remaining billing periods.
       * @example 1
       */
      frequency_duration_remaining?: number | null;
      /**
       * Format: date-time
       * @description The date and time after which the coupon will stop applying to customer's invoices. Once the expiration date is reached, the coupon will no longer be applicable, and any further invoices generated for the customer will not include the coupon discount.
       * @example 2022-04-29T08:59:51Z
       */
      expiration_at?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the coupon was assigned to a customer. It is expressed in UTC format according to the ISO 8601 datetime standard.
       * @example 2022-04-29T08:59:51Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @description This field indicates the specific moment when the coupon amount is fully utilized or when the coupon is removed from the customer's coupon list. It is expressed in UTC format according to the ISO 8601 datetime standard.
       * @example 2022-04-29T08:59:51Z
       */
      terminated_at?: string | null;
    };
    AppliedCouponObjectExtended: components["schemas"]["AppliedCouponObject"] & {
      credits: components["schemas"]["CreditObject"][];
    };
    AppliedCouponsPaginated: {
      applied_coupons: components["schemas"]["AppliedCouponObjectExtended"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    BaseAppliedTax: {
      /**
       * Format: uuid
       * @description Unique identifier of the applied tax, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id?: string;
      /**
       * Format: uuid
       * @description Unique identifier of the tax, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_tax_id?: string;
      /**
       * @description Name of the tax.
       * @example TVA
       */
      tax_name?: string;
      /**
       * @description Unique code used to identify the tax associated with the API request.
       * @example french_standard_vat
       */
      tax_code?: string;
      /**
       * @description The percentage rate of the tax
       * @example 20
       */
      tax_rate?: number;
      /**
       * @description Internal description of the taxe
       * @example French standard VAT
       */
      tax_description?: string;
      /**
       * @description Amount of the tax
       * @example 2000
       */
      amount_cents?: number;
      amount_currency?: components["schemas"]["Currency"];
      /**
       * Format: date-time
       * @description The date and time when the applied tax was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the applied tax was initially created.
       * @example 2022-09-14T16:35:31Z
       */
      created_at?: string;
    };
    BillableMetric: {
      billable_metric: components["schemas"]["BillableMetricObject"];
    };
    BillableMetricObject: {
      /**
       * Format: uuid
       * @description Unique identifier of the billable metric created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description Name of the billable metric.
       * @example Storage
       */
      name: string;
      /**
       * @description Unique code used to identify the billable metric associated with the API request. This code associates each event with the correct metric.
       * @example storage
       */
      code: string;
      /**
       * @description Internal description of the billable metric.
       * @example GB of storage used in my application
       */
      description?: string | null;
      /**
       * @description Defines if the billable metric is persisted billing period over billing period.
       *
       * - If set to `true`: the accumulated number of units calculated from the previous billing period is persisted to the next billing period.
       * - If set to `false`: the accumulated number of units is reset to 0 at the end of the billing period.
       * - If not defined in the request, default value is `false`.
       * @example false
       */
      recurring: boolean;
      /**
       * Format: date-time
       * @description Creation date of the billable metric.
       * @example 2022-09-14T16:35:31Z
       */
      created_at: string;
      /**
       * @description Property of the billable metric used for aggregating usage data. This field is not required for `count_agg`.
       * @example gb
       */
      field_name?: string | null;
      /**
       * @description Aggregation method used to compute usage for this billable metric.
       * @example sum_agg
       * @enum {string}
       */
      aggregation_type: "count_agg" | "sum_agg" | "max_agg" | "unique_count_agg" | "weighted_sum_agg" | "latest_agg";
      /**
       * @description Parameter exclusively utilized in conjunction with the `weighted_sum` aggregation type. It serves to adjust the aggregation result by assigning weights and proration to the result based on time intervals. When this field is not provided, the default time interval is assumed to be in `seconds`.
       * @example seconds
       * @enum {string|null}
       */
      weighted_interval?: "seconds" | null;
      group?: components["schemas"]["BillableMetricGroup"];
      /**
       * @description Number of active subscriptions using this billable metric.
       * @example 4
       */
      active_subscriptions_count: number;
      /**
       * @description Number of draft invoices for which this billable metric is listed as an invoice item.
       * @example 10
       */
      draft_invoices_count: number;
      /**
       * @description Number of plans using this billable metric.
       * @example 4
       */
      plans_count: number;
    };
    BillableMetricBaseInput: {
      /**
       * @description Name of the billable metric.
       * @example Storage
       */
      name?: string;
      /**
       * @description Unique code used to identify the billable metric associated with the API request. This code associates each event with the correct metric.
       * @example storage
       */
      code?: string;
      /**
       * @description Internal description of the billable metric.
       * @example GB of storage used in my application
       */
      description?: string | null;
      /**
       * @description Defines if the billable metric is persisted billing period over billing period.
       *
       * - If set to `true`: the accumulated number of units calculated from the previous billing period is persisted to the next billing period.
       * - If set to `false`: the accumulated number of units is reset to 0 at the end of the billing period.
       * - If not defined in the request, default value is `false`.
       * @example false
       */
      recurring?: boolean;
      /**
       * @description Property of the billable metric used for aggregating usage data. This field is not required for `count_agg`.
       * @example gb
       */
      field_name?: string | null;
      /**
       * @description Aggregation method used to compute usage for this billable metric.
       * @example sum_agg
       * @enum {string}
       */
      aggregation_type?: "count_agg" | "sum_agg" | "max_agg" | "unique_count_agg" | "weighted_sum_agg" | "latest_agg";
      /**
       * @description Parameter exclusively utilized in conjunction with the `weighted_sum` aggregation type. It serves to adjust the aggregation result by assigning weights and proration to the result based on time intervals. When this field is not provided, the default time interval is assumed to be in `seconds`.
       * @example seconds
       * @enum {string|null}
       */
      weighted_interval?: "seconds" | null;
      group?: components["schemas"]["BillableMetricGroup"];
    };
    BillableMetricCreateInput: {
      billable_metric: components["schemas"]["BillableMetricBaseInput"];
    };
    BillableMetricUpdateInput: {
      billable_metric: components["schemas"]["BillableMetricBaseInput"];
    };
    /** @description Group with one or two dimensions, used to apply differentiated pricing based on additional properties of the billable metric. */
    BillableMetricGroup: {
      /**
       * @description Name of the event property used to group values.
       * @example region
       */
      key: string;
      /**
       * @description Array of strings or objects representing all possible values.
       * @example [
       *   "us-east-1",
       *   "us-east-2",
       *   "eu-west-1"
       * ]
       */
      values: OneOf<[string, {
          /**
           * @description Name of the event property used to group values.
           * @example region
           */
          key: string;
          /**
           * @description Array of strings representing all possible values.
           * @example [
           *   "us-east-1",
           *   "us-east-2",
           *   "eu-west-1"
           * ]
           */
          values: string[];
        }]>[];
    };
    BillableMetricsPaginated: {
      billable_metrics: components["schemas"]["BillableMetricObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    ChargeObject: {
      /**
       * Format: uuid
       * @description Unique identifier of charge, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * Format: uuid
       * @description Unique identifier of the billable metric created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_billable_metric_id: string;
      /**
       * @description Unique code identifying a billable metric.
       * @example requests
       */
      billable_metric_code: string;
      /**
       * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
       * @example Setup
       */
      invoice_display_name?: string;
      /**
       * Format: date-time
       * @description The date and time when the charge was created. It is expressed in UTC format according to the ISO 8601 datetime standard.
       * @example 2022-09-14T16:35:31Z
       */
      created_at: string;
      /**
       * @description Specifies the pricing model used for the calculation of the final fee. It can be `standard`, `graduated`, `graduated_percentage`, `package`, `percentage` or `volume`.
       * @enum {string}
       */
      charge_model: "standard" | "graduated" | "graduated_percentage" | "package" | "percentage" | "volume";
      /**
       * @description This field determines the billing timing for this specific usage-based charge. When set to `true`, the charge is due and invoiced immediately. Conversely, when set to `false`, the charge is due and invoiced at the end of each billing period.
       * @example true
       */
      pay_in_advance?: boolean;
      /**
       * @description This field specifies whether the charge should be included in a proper invoice. If set to `false`, no invoice will be issued for this charge. You can only set it to `false` when `pay_in_advance` is `true`.
       * @example true
       */
      invoiceable?: boolean;
      /**
       * @description Specifies whether a charge is prorated based on the remaining number of days in the billing period or billed fully.
       *
       * - If set to `true`, the charge is prorated based on the remaining days in the current billing period.
       * - If set to `false`, the charge is billed in full.
       * - If not defined in the request, default value is `false`.
       * @example false
       */
      prorated?: boolean;
      /**
       * @description The minimum spending amount required for the charge, measured in cents and excluding any applicable taxes. It indicates the minimum amount that needs to be charged for each billing period.
       * @example 1200
       */
      min_amount_cents?: number;
      properties?: components["schemas"]["ChargeProperties"];
      /** @description All charge information, sorted by groups. */
      group_properties?: components["schemas"]["GroupPropertiesObject"][];
      /** @description All taxes applied to the charge. */
      taxes?: components["schemas"]["TaxObject"][];
    };
    ChargeProperties: {
      /** @description Graduated ranges, sorted from bottom to top tiers, used for a `graduated` charge model. */
      graduated_ranges?: ({
          /**
           * @description Specifies the lower value of a tier for a `graduated` charge model. It must be either 0 or the previous range's `to_value + 1` to maintain the proper sequence of values.
           * @example 0
           */
          from_value: number;
          /**
           * @description Specifies the highest value of a tier for a `graduated` charge model.
           * - This value must be higher than the from_value of the same tier.
           * - This value must be null for the last tier.
           * @example 10
           */
          to_value: number | null;
          /**
           * @description The flat amount for a whole tier, excluding tax, for a `graduated` charge model. It is expressed as a decimal value.
           * @example 10
           */
          flat_amount: string;
          /**
           * @description The unit price, excluding tax, for a specific tier of a `graduated` charge model. It is expressed as a decimal value.
           * @example 0.5
           */
          per_unit_amount: string;
        })[];
      /** @description Graduated percentage ranges, sorted from bottom to top tiers, used for a `graduated_percentage` charge model. */
      graduated_percentage_ranges?: ({
          /**
           * @description Specifies the lower value of a tier for a `graduated_percentage` charge model. It must be either 0 or the previous range's `to_value + 1` to maintain the proper sequence of values.
           * @example 0
           */
          from_value: number;
          /**
           * @description Specifies the highest value of a tier for a `graduated_percentage` charge model.
           * - This value must be higher than the from_value of the same tier.
           * - This value must be null for the last tier.
           * @example 10
           */
          to_value: number | null;
          /**
           * Format: ^[0-9]+.?[0-9]*$
           * @description The percentage rate that is applied to the amount of each transaction in the tier for a `graduated_percentage` charge model. It is expressed as a decimal value.
           * @example 1
           */
          rate: string;
          /**
           * Format: ^[0-9]+.?[0-9]*$
           * @description The flat amount for a whole tier, excluding tax, for a `graduated_percentage` charge model. It is expressed as a decimal value.
           * @example 10
           */
          flat_amount: string;
        })[];
      /**
       * @description - The unit price, excluding tax, for a `standard` charge model. It is expressed as a decimal value.
       * - The amount, excluding tax, for a complete set of units in a `package` charge model. It is expressed as a decimal value.
       * @example 30
       */
      amount?: string;
      /**
       * @description The quantity of units that are provided free of charge for each billing period in a `package` charge model. This field specifies the number of units that customers can use without incurring any additional cost during each billing cycle.
       * @example 100
       */
      free_units?: number;
      /**
       * @description The quantity of units included in each pack or set for a `package` charge model. It indicates the number of units that are bundled together as a single package or set within the pricing structure.
       * @example 1000
       */
      package_size?: number;
      /**
       * @description The percentage rate that is applied to the amount of each transaction for a `percentage` charge model. It is expressed as a decimal value.
       * @example 1
       */
      rate?: string;
      /**
       * @description The fixed fee that is applied to each transaction for a `percentage` charge model. It is expressed as a decimal value.
       * @example 0.5
       */
      fixed_amount?: string;
      /**
       * @description The count of transactions that are not impacted by the `percentage` rate and fixed fee in a percentage charge model. This field indicates the number of transactions that are exempt from the calculation of charges based on the specified percentage rate and fixed fee.
       * @example 5
       */
      free_units_per_events?: number | null;
      /**
       * @description The transaction amount that is not impacted by the `percentage` rate and fixed fee in a percentage charge model. This field indicates the portion of the transaction amount that is exempt from the calculation of charges based on the specified percentage rate and fixed fee.
       * @example 500
       */
      free_units_per_total_aggregation?: string | null;
      /**
       * Format: ^[0-9]+.?[0-9]*$
       * @description Specifies the maximum allowable spending for a single transaction. Working as a transaction cap.
       * @example 3.75
       */
      per_transaction_max_amount?: string | null;
      /**
       * Format: ^[0-9]+.?[0-9]*$
       * @description Specifies the minimum allowable spending for a single transaction. Working as a transaction floor.
       * @example 1.75
       */
      per_transaction_min_amount?: string | null;
      /** @description Volume ranges, sorted from bottom to top tiers, used for a `volume` charge model. */
      volume_ranges?: ({
          /**
           * @description Specifies the lower value of a tier for a `volume` charge model. It must be either 0 or the previous range's `to_value + 1` to maintain the proper sequence of values.
           * @example 0
           */
          from_value: number;
          /**
           * @description Specifies the highest value of a tier for a `volume` charge model.
           * - This value must be higher than the `from_value` of the same tier.
           * - This value must be `null` for the last tier.
           * @example 10
           */
          to_value: number | null;
          /**
           * @description The unit price, excluding tax, for a specific tier of a `volume` charge model. It is expressed as a decimal value.
           * @example 10
           */
          flat_amount: string;
          /**
           * @description The flat amount for a whole tier, excluding tax, for a `volume` charge model. It is expressed as a decimal value.
           * @example 0.5
           */
          per_unit_amount: string;
        })[];
    };
    /**
     * @example US
     * @enum {string}
     */
    Country: "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "UM" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "YE" | "YT" | "ZA" | "ZM" | "ZW";
    Coupon: {
      coupon: components["schemas"]["CouponObject"];
    };
    CouponBaseInput: {
      /**
       * @description The name of the coupon.
       * @example Startup Deal
       */
      name?: string;
      /**
       * @description Unique code used to identify the coupon.
       * @example startup_deal
       */
      code?: string;
      /**
       * @description Description of the coupon.
       * @example I am a coupon description
       */
      description?: string | null;
      /**
       * @description The type of the coupon. It can have two possible values: `fixed_amount` or `percentage`.
       *
       * - If set to `fixed_amount`, the coupon represents a fixed amount discount.
       * - If set to `percentage`, the coupon represents a percentage-based discount.
       * @example fixed_amount
       * @enum {string}
       */
      coupon_type?: "fixed_amount" | "percentage";
      /**
       * @description The amount of the coupon in cents. This field is required only for coupon with `fixed_amount` type.
       * @example 5000
       */
      amount_cents?: number | null;
      amount_currency?: components["schemas"]["Currency"] & (Record<string, unknown> | null);
      /**
       * @description Indicates whether the coupon can be reused or not. If set to `true`, the coupon is reusable, meaning it can be applied multiple times to the same customer. If set to `false`, the coupon can only be used once and is not reusable. If not specified, this field is set to `true` by default.
       * @example false
       */
      reusable?: boolean;
      /**
       * @description The percentage rate of the coupon. This field is required only for coupons with a `percentage` coupon type.
       * @example null
       */
      percentage_rate?: string | null;
      /**
       * @description The type of frequency for the coupon. It can have three possible values: `once`, `recurring` or `forever`.
       *
       * - If set to `once`, the coupon is applicable only for a single use.
       * - If set to `recurring`, the coupon can be used multiple times for recurring billing periods.
       * - If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.
       * @example recurring
       * @enum {string}
       */
      frequency?: "once" | "recurring";
      /**
       * @description Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a `recurring` frequency type
       * @example 6
       */
      frequency_duration?: number | null;
      /**
       * @description Specifies the type of expiration for the coupon. It can have two possible values: `time_limit` or `no_expiration`.
       *
       * - If set to `time_limit`, the coupon has an expiration based on a specified time limit.
       * - If set to `no_expiration`, the coupon does not have an expiration date and remains valid indefinitely.
       * @example time_limit
       * @enum {string}
       */
      expiration?: "no_expiration" | "time_limit";
      /**
       * Format: date-time
       * @description The expiration date and time of the coupon. This field is required only for coupons with `expiration` set to `time_limit`. The expiration date and time should be specified in UTC format according to the ISO 8601 datetime standard. It indicates the exact moment when the coupon will expire and is no longer valid.
       * @example 2022-08-08T23:59:59Z
       */
      expiration_at?: string | null;
      /** @description Set coupon limitations to plans or specific metrics. */
      applies_to?: ({
        /**
         * @description An array of plan codes to which the coupon is applicable. By specifying the plan codes in this field, you can restrict the coupon's usage to specific plans only.
         * @example [
         *   "startup_plan"
         * ]
         */
        plan_codes?: string[] | null;
        /**
         * @description An array of billable metric codes to which the coupon is applicable. By specifying the billable metric codes in this field, you can restrict the coupon's usage to specific metrics only.
         * @example []
         */
        billable_metric_codes?: string[] | null;
      }) | null;
    };
    CouponCreateInput: {
      coupon: components["schemas"]["CouponBaseInput"];
    };
    CouponObject: {
      /**
       * Format: uuid
       * @description Unique identifier of the coupon, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The name of the coupon.
       * @example Startup Deal
       */
      name: string;
      /**
       * @description Unique code used to identify the coupon.
       * @example startup_deal
       */
      code: string;
      /**
       * @description Description of the coupon.
       * @example I am a coupon description
       */
      description?: string | null;
      /**
       * @description The type of the coupon. It can have two possible values: `fixed_amount` or `percentage`.
       *
       * - If set to `fixed_amount`, the coupon represents a fixed amount discount.
       * - If set to `percentage`, the coupon represents a percentage-based discount.
       * @example fixed_amount
       * @enum {string}
       */
      coupon_type: "fixed_amount" | "percentage";
      /**
       * @description The amount of the coupon in cents. This field is required only for coupon with `fixed_amount` type.
       * @example 5000
       */
      amount_cents?: number | null;
      amount_currency?: components["schemas"]["Currency"] & (Record<string, unknown> | null);
      /**
       * @description Indicates whether the coupon can be reused or not. If set to `true`, the coupon is reusable, meaning it can be applied multiple times to the same customer. If set to `false`, the coupon can only be used once and is not reusable. If not specified, this field is set to `true` by default.
       * @example true
       */
      reusable: boolean;
      /**
       * @description The coupon is limited to specific plans. The possible values can be `true` or `false`.
       * @example true
       */
      limited_plans: boolean;
      /**
       * @description An array of plan codes to which the coupon is applicable. By specifying the plan codes in this field, you can restrict the coupon's usage to specific plans only.
       * @example [
       *   "startup_plan"
       * ]
       */
      plan_codes?: string[];
      /**
       * @description The coupon is limited to specific billable metrics. The possible values can be `true` or `false`.
       * @example false
       */
      limited_billable_metrics: boolean;
      /**
       * @description An array of billable metric codes to which the coupon is applicable. By specifying the billable metric codes in this field, you can restrict the coupon's usage to specific metrics only.
       * @example []
       */
      billable_metric_codes?: string[];
      /**
       * @description The percentage rate of the coupon. This field is required only for coupons with a `percentage` coupon type.
       * @example null
       */
      percentage_rate?: string | null;
      /**
       * @description The type of frequency for the coupon. It can have three possible values: `once`, `recurring`, or `forever`.
       *
       * - If set to `once`, the coupon is applicable only for a single use.
       * - If set to `recurring`, the coupon can be used multiple times for recurring billing periods.
       * - If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.
       * @example recurring
       * @enum {string}
       */
      frequency: "once" | "recurring";
      /**
       * @description Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a `recurring` frequency type
       * @example 6
       */
      frequency_duration?: number | null;
      /**
       * @description Specifies the type of expiration for the coupon. It can have two possible values: `time_limit` or `no_expiration`.
       *
       * - If set to `time_limit`, the coupon has an expiration based on a specified time limit.
       * - If set to `no_expiration`, the coupon does not have an expiration date and remains valid indefinitely.
       * @example time_limit
       * @enum {string}
       */
      expiration: "no_expiration" | "time_limit";
      /**
       * Format: date-time
       * @description The expiration date and time of the coupon. This field is required only for coupons with `expiration` set to `time_limit`. The expiration date and time should be specified in UTC format according to the ISO 8601 datetime standard. It indicates the exact moment when the coupon will expire and is no longer valid.
       * @example 2022-08-08T23:59:59Z
       */
      expiration_at?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the coupon was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the coupon was initially created.
       * @example 2022-04-29T08:59:51Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @description This field indicates if the coupon has been terminated and is no longer usable. If it's not null, it won't be removed for existing customers using it, but it prevents the coupon from being applied in the future.
       * @example 2022-08-08T23:59:59Z
       */
      terminated_at?: string;
    };
    CouponsPaginated: {
      coupons: components["schemas"]["CouponObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    CouponUpdateInput: {
      coupon: components["schemas"]["CouponBaseInput"];
    };
    CreditObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the credit within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the creditâ€™s item record within the Lago system.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The amount of credit associated with the invoice, expressed in cents.
       * @example 1200
       */
      amount_cents: number;
      amount_currency: components["schemas"]["Currency"];
      /**
       * @description Indicates whether the credit is applied on the amount before taxes (coupons) or after taxes (credit notes). This flag helps determine the order in which credits are applied to the invoice calculation
       * @example false
       */
      before_taxes: boolean;
      /** @description The item attached to the credit. */
      item: {
        /**
         * Format: uuid
         * @description Unique identifier assigned to the credit item within the Lago application.
         * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
         */
        lago_item_id: string;
        /**
         * @description The type of credit applied. Possible values are `coupon` or `credit_note`.
         * @example coupon
         * @enum {string}
         */
        type: "coupon" | "credit_note";
        /**
         * @description The code of the credit applied. It can be the code of the coupon attached to the credit or the credit note's number.
         * @example startup_deal
         */
        code: string;
        /**
         * @description The name of the credit applied. It can be the name of the coupon attached to the credit or the initial invoice's number linked to the credit note.
         * @example Startup Deal
         */
        name: string;
      };
      invoice: {
        /**
         * Format: uuid
         * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
         */
        lago_id: string;
        /**
         * @example succeeded
         * @enum {string}
         */
        payment_status: "pending" | "succeeded" | "failed";
      };
    };
    CreditNote: {
      credit_note: components["schemas"]["CreditNoteObject"];
    };
    CreditNoteAppliedTaxObject: {
      /**
       * Format: uuid
       * @description Unique identifier of the credit note, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_credit_note_id?: string;
      /** @example 100 */
      base_amount_cents?: number;
    } & components["schemas"]["BaseAppliedTax"];
    CreditNoteItemObject: {
      /**
       * Format: uuid
       * @description The credit noteâ€™s item unique identifier, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The credit noteâ€™s item amount, expressed in cents.
       * @example 100
       */
      amount_cents: number;
      amount_currency: components["schemas"]["Currency"];
      fee: components["schemas"]["FeeObject"];
    };
    CreditNoteObject: {
      /**
       * Format: uuid
       * @description The credit note unique identifier, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The sequential identifier of the credit note, specifically scoped on the associated invoice. It provides a unique numerical identifier for the credit note within the context of the invoice.
       * @example 2
       */
      sequential_id: number;
      /**
       * @description The credit note unique number.
       * @example LAG-1234-CN2
       */
      number: string;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the invoice that the credit note belongs to
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_invoice_id: string;
      /**
       * @description The invoice unique number, related to the credit note.
       * @example LAG-1234
       */
      invoice_number: string;
      /**
       * Format: date
       * @description The date of creation of the credit note. It follows the ISO 8601 date format and provides the specific date when the credit note was created.
       * @example 2022-12-06
       */
      issuing_date: string;
      /**
       * @description The status of the credit portion of the credit note. It indicates the current state or condition of the credit amount associated with the credit note. The possible values for this field are:
       *
       * - `available`: this status indicates that an amount remains available for future usage. The credit can be applied towards future transactions or invoices.
       * - `consumed`: this status indicates that the credit amount has been fully consumed. The remaining amount is 0, indicating that the credit has been utilized in its entirety.
       * - `voided`: this status indicates that the remaining amount of the credit cannot be used any further. The credit has been voided and is no longer available for application or redemption.
       * @example available
       * @enum {string|null}
       */
      credit_status?: "available" | "consumed" | "voided" | null;
      /**
       * @description The status of the refund portion of the credit note. It indicates the current state or condition of the refund associated with the credit note. The possible values for this field are:
       *
       * - `pending`: this status indicates that the refund is pending execution. The refund request has been initiated but has not been processed or completed yet.
       * - `succeeded`: this status indicates that the refund has been successfully executed. The refund amount has been processed and returned to the customer or the designated recipient.
       * - `failed`: this status indicates that the refund failed to execute. The refund request encountered an error or unsuccessful processing, and the refund amount could not be returned.
       * @example pending
       * @enum {string|null}
       */
      refund_status?: "pending" | "succeeded" | "failed" | null;
      /**
       * @description The reason of the credit note creation.
       * Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
       * @example other
       * @enum {string}
       */
      reason: "duplicated_charge" | "product_unsatisfactory" | "order_change" | "order_cancellation" | "fraudulent_charge" | "other";
      /**
       * @description The description of the credit note.
       * @example Free text
       */
      description?: string | null;
      currency: components["schemas"]["Currency"];
      /**
       * @description The total amount of the credit note, expressed in cents.
       * @example 120
       */
      total_amount_cents: number;
      /**
       * @description The tax amount of the credit note, expressed in cents.
       * @example 20
       */
      taxes_amount_cents: number;
      /**
       * @description The tax rate associated with this specific credit note.
       * @example 20
       */
      taxes_rate: number;
      /**
       * @description The subtotal of the credit note excluding any applicable taxes, expressed in cents.
       * @example 100
       */
      sub_total_excluding_taxes_amount_cents: number;
      /**
       * @description The remaining credit note amount, expressed in cents.
       * @example 100
       */
      balance_amount_cents: number;
      /**
       * @description The credited amount of the credit note, expressed in cents.
       * @example 100
       */
      credit_amount_cents: number;
      /**
       * @description The refunded amount of the credit note, expressed in cents.
       * @example 0
       */
      refund_amount_cents: number;
      /**
       * @description The pro-rated amount of the coupons applied to the source invoice.
       * @example 20
       */
      coupons_adjustement_amount_cents: number;
      /**
       * Format: date-time
       * @description The date when the credit note was created. It is expressed in Coordinated Universal Time (UTC).
       * @example 2022-09-14T16:35:31Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @description The date when the credit note was last updated. It is expressed in Coordinated Universal Time (UTC).
       * @example 2022-09-14T16:35:31Z
       */
      updated_at: string;
      /**
       * @description The PDF file of the credit note.
       * @example https://getlago.com/credit_note/file
       */
      file_url?: string | null;
      /** @description Array of credit noteâ€™s items. */
      items?: components["schemas"]["CreditNoteItemObject"][];
      applied_taxes?: components["schemas"]["CreditNoteAppliedTaxObject"][];
    };
    CreditNotes: {
      credit_notes: components["schemas"]["CreditNoteObject"][];
    };
    CreditNoteCreateInput: {
      credit_note: {
        /**
         * Format: uuid
         * @description The invoice unique identifier, created by Lago.
         * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
         */
        invoice_id: string;
        /**
         * @description The reason of the credit note creation.
         * Possible values are `duplicated_charge`, `product_unsatisfactory`, `order_change`, `order_cancellation`, `fraudulent_charge` or `other`.
         * @example duplicated_charge
         * @enum {string|null}
         */
        reason?: "duplicated_charge" | "product_unsatisfactory" | "order_change" | "order_cancellation" | "fraudulent_charge" | "other" | null;
        /**
         * @description The description of the credit note.
         * @example description
         */
        description?: string;
        /**
         * @description The total amount to be credited on the customer balance.
         * @example 10
         */
        credit_amount_cents?: number | null;
        /**
         * @description The total amount to be refunded to the customer.
         * @example 5
         */
        refund_amount_cents?: number | null;
        /**
         * @description The list of credit noteâ€™s items.
         * @example [
         *   {
         *     "fee_id": "1a901a90-1a90-1a90-1a90-1a901a901a90",
         *     "amount_cents": 10
         *   },
         *   {
         *     "fee_id": "1a901a90-1a90-1a90-1a90-1a901a901a91",
         *     "amount_cents": 5
         *   }
         * ]
         */
        items: {
            /**
             * Format: uuid
             * @description The fee unique identifier, created by Lago.
             * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
             */
            fee_id: string;
            /**
             * @description The amount of the credit note item, expressed in cents.
             * @example 10
             */
            amount_cents: number;
          }[];
      };
    };
    CreditNoteUpdateInput: {
      credit_note: {
        /**
         * @description The status of the refund portion of the credit note. It indicates the current state or condition of the refund associated with the credit note. The possible values for this field are:
         *
         * - `pending`: this status indicates that the refund is pending execution. The refund request has been initiated but has not been processed or completed yet.
         * - `succeeded`: this status indicates that the refund has been successfully executed. The refund amount has been processed and returned to the customer or the designated recipient.
         * - `failed`: this status indicates that the refund failed to execute. The refund request encountered an error or unsuccessful processing, and the refund amount could not be returned.
         * @example succeeded
         * @enum {string}
         */
        refund_status: "pending" | "succeeded" | "failed";
      };
    };
    /**
     * @example USD
     * @enum {string}
     */
    Currency: "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BIF" | "BMD" | "BND" | "BOB" | "BRL" | "BSD" | "BWP" | "BYN" | "BZD" | "CAD" | "CDF" | "CHF" | "CLF" | "CLP" | "CNY" | "COP" | "CRC" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ETB" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "INR" | "ISK" | "JMD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KRW" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRO" | "MUR" | "MVR" | "MWK" | "MXN" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NZD" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SEK" | "SGD" | "SHP" | "SLL" | "SOS" | "SRD" | "STD" | "SZL" | "THB" | "TJS" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "UYU" | "UZS" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XOF" | "XPF" | "YER" | "ZAR" | "ZMW";
    Customer: {
      customer: components["schemas"]["CustomerObjectExtended"];
    };
    /** @description Configuration specific to the payment provider, utilized for billing the customer. This object contains settings and parameters necessary for processing payments and invoicing the customer. */
    CustomerBillingConfiguration: {
      /**
       * @description The grace period, expressed in days, for the invoice. This period refers to the additional time granted to the customer beyond the invoice due date to adjust usage and line items
       * @example 3
       */
      invoice_grace_period?: number;
      /**
       * @description The payment provider utilized to initiate payments for invoices issued by Lago.
       * Accepted values: `stripe`, `adyen`, `gocardless` or null. This field is required if you intend to assign a `provider_customer_id`.
       * @example stripe
       * @enum {string}
       */
      payment_provider?: "stripe" | "adyen" | "gocardless";
      /**
       * @description The customer ID within the payment provider's system. If this field is not provided, Lago has the option to create a new customer record within the payment provider's system on behalf of the customer
       * @example cus_12345
       */
      provider_customer_id?: string;
      /**
       * @description Set this field to `true` if you want to create the customer in the payment provider synchronously with the customer creation process in Lago. This option is applicable only when the `provider_customer_id` is `null` and the customer is automatically created in the payment provider through Lago. By default, the value is set to `false`
       * @example true
       */
      sync?: boolean;
      /**
       * @description Set this field to `true` if you want to create a customer record in the payment provider's system. This option is applicable only when the `provider_customer_id` is null and the `sync_with_provider` field is set to `true`. By default, the value is set to `false`
       * @example true
       */
      sync_with_provider?: boolean;
      /**
       * @description The document locale, specified in the ISO 639-1 format. This field represents the language or locale used for the documents issued by Lago
       * @example fr
       */
      document_locale?: string;
      /**
       * @description Specifies the available payment methods that can be used for this customer when `payment_provider` is set to `stripe`. The `provider_payment_methods` field is an array that allows multiple payment options to be defined. If this field is not explicitly set, all the payment methods are selected. For now, possible values are `card` and `sepa_debit`.
       * @example [
       *   "card",
       *   "sepa_debit"
       * ]
       */
      provider_payment_methods?: string[] | null;
    };
    CustomerChargeUsageObject: {
      /**
       * @description The number of units consumed by the customer for a specific charge item.
       * @example 1.0
       */
      units: string;
      /**
       * @description The quantity of usage events that have been recorded for a particular charge during the specified time period. These events may also be referred to as the number of transactions in some contexts.
       * @example 10
       */
      events_count: number;
      /**
       * @description The amount in cents, tax excluded, consumed by the customer for a specific charge item.
       * @example 123
       */
      amount_cents: number;
      amount_currency: components["schemas"]["Currency"];
      /** @description Object listing all the properties for a specific charge item. */
      charge: {
        /**
         * Format: uuid
         * @description Unique identifier assigned to the charge within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the chargeâ€™s record within the Lago system.
         * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
         */
        lago_id: string;
        /**
         * @description The pricing model applied to this charge. Possible values are standard, `graduated`, `percentage`, `package` or `volume`.
         * @example graduated
         * @enum {string}
         */
        charge_model: "standard" | "graduated" | "package" | "percentage" | "volume";
      };
      /** @description The related billable metric object. */
      billable_metric: {
        /**
         * Format: uuid
         * @description Unique identifier assigned to the billable metric within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the billable metricâ€™s record within the Lago system.
         * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
         */
        lago_id: string;
        /**
         * @description The name of the billable metric used for this charge.
         * @example Storage
         */
        name: string;
        /**
         * @description The code of the billable metric used for this charge.
         * @example storage
         */
        code: string;
        /**
         * @description The aggregation type of the billable metric used for this charge. Possible values are `count_agg`, `sum_agg`, `max_agg` or `unique_count_agg`.
         * @example sum_agg
         * @enum {string}
         */
        aggregation_type: "count_agg" | "sum_agg" | "max_agg" | "unique_count_agg";
      };
      /** @description Array of group object, representing multiple dimensions for a charge item. */
      groups: ({
          /**
           * Format: uuid
           * @description Unique identifier assigned to the group within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the group record within the Lago system.
           * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
           */
          lago_id?: string;
          /**
           * @description The group key, only returned for groups with two dimensions.
           * @example null
           */
          key?: string | null;
          /**
           * @description The group value.
           * @example europe
           */
          value?: string;
          /**
           * @description The number of units consumed for a specific group related to a charge item.
           * @example 0.9
           */
          units?: string;
          /**
           * @description The quantity of usage events that have been recorded for a particular charge during the specified time period. These events may also be referred to as the number of transactions in some contexts.
           * @example 10
           */
          events_count?: number;
          /**
           * @description The amount in cents, tax excluded, consumed for a specific group related to a charge item.
           * @example 1000
           */
          amount_cents?: number;
        })[];
    };
    CustomerCreateInput: {
      customer: {
        /**
         * @description The customer external unique identifier (provided by your own application)
         * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
         */
        external_id: string;
        /**
         * @description The first line of the billing address
         * @example 5230 Penfield Ave
         */
        address_line1?: string | null;
        /**
         * @description The second line of the billing address
         * @example
         */
        address_line2?: string | null;
        /**
         * @description The city of the customer's billing address
         * @example Woodland Hills
         */
        city?: string | null;
        country?: components["schemas"]["Country"] & (Record<string, unknown> | null);
        currency?: components["schemas"]["Currency"] & (Record<string, unknown> | null);
        /**
         * Format: email
         * @description The email of the customer
         * @example dinesh@piedpiper.test
         */
        email?: string | null;
        /**
         * @description The legal company name of the customer
         * @example Coleman-Blair
         */
        legal_name?: string | null;
        /**
         * @description The legal company number of the customer
         * @example 49-008-2965
         */
        legal_number?: string | null;
        /**
         * @description The logo URL of the customer
         * @example http://hooli.com/logo.png
         */
        logo_url?: string | null;
        /**
         * @description The full name of the customer
         * @example Gavin Belson
         */
        name?: string | null;
        /**
         * @description The phone number of the customer
         * @example 1-171-883-3711 x245
         */
        phone?: string | null;
        /**
         * @description The state of the customer's billing address
         * @example CA
         */
        state?: string | null;
        /**
         * @description List of unique code used to identify the taxes.
         * @example [
         *   "french_standard_vat"
         * ]
         */
        tax_codes?: string[];
        /**
         * @description The tax identification number of the customer
         * @example EU123456789
         */
        tax_identification_number?: string | null;
        timezone?: components["schemas"]["Timezone"] & (Record<string, unknown> | null);
        /**
         * @description The custom website URL of the customer
         * @example http://hooli.com
         */
        url?: string | null;
        /**
         * @description The zipcode of the customer's billing address
         * @example 91364
         */
        zipcode?: string | null;
        /**
         * @description The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
         * @example 30
         */
        net_payment_term?: number | null;
        billing_configuration?: components["schemas"]["CustomerBillingConfiguration"];
        /** @description Set of key-value pairs that you can attach to a customer. This can be useful for storing additional information about the customer in a structured format */
        metadata?: {
            /**
             * Format: uuid
             * @description Identifier for the metadata object, only required when updating a key-value pair
             * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
             */
            id?: string;
            /**
             * @description The metadata object key
             * @example Purchase Order
             */
            key: string;
            /**
             * @description The metadata object value
             * @example 123456789
             */
            value: string;
            /**
             * @description Determines whether the item or information should be displayed in the invoice. If set to true, the item or information will be included and visible in the generated invoice. If set to false, the item or information will be excluded and not displayed in the invoice.
             * @example true
             */
            display_in_invoice: boolean;
          }[];
      };
    };
    /** @description Set of key-value pairs that you can attach to a customer. This can be useful for storing additional information about the customer in a structured format */
    CustomerMetadata: {
      /**
       * Format: uuid
       * @description A unique identifier for the customer metadata object in the Lago application. Can be used to update a key-value pair
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The metadata object key
       * @example Purchase Order
       */
      key: string;
      /**
       * @description The metadata object value
       * @example 123456789
       */
      value: string;
      /**
       * @description Determines whether the item or information should be displayed in the invoice. If set to true, the item or information will be included and visible in the generated invoice. If set to false, the item or information will be excluded and not displayed in the invoice.
       * @example true
       */
      display_in_invoice: boolean;
      /**
       * Format: date-time
       * @description The date of the metadata object creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The creation_date provides a standardized and internationally recognized timestamp for when the metadata object was created
       * @example 2022-04-29T08:59:51Z
       */
      created_at: string;
    };
    CustomerObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer's record within the Lago system
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The unique identifier assigned to the customer within the organization's scope. This identifier is used to track and reference the customer's order of creation within the organization's system. It ensures that each customer has a distinct `sequential_id`` associated with them, allowing for easy identification and sorting based on the order of creation
       * @example 1
       */
      sequential_id: number;
      /**
       * @description A concise and unique identifier for the customer, formed by combining the Organization's `name`, `id`, and customer's `sequential_id`
       * @example LAG-1234-001
       */
      slug: string;
      /**
       * @description The customer external unique identifier (provided by your own application)
       * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
       */
      external_id: string;
      /**
       * @description The first line of the billing address
       * @example 5230 Penfield Ave
       */
      address_line1?: string | null;
      /**
       * @description The second line of the billing address
       * @example null
       */
      address_line2?: string | null;
      applicable_timezone: components["schemas"]["Timezone"];
      /**
       * @description The city of the customer's billing address
       * @example Woodland Hills
       */
      city?: string | null;
      country?: components["schemas"]["Country"] & (Record<string, unknown> | null);
      currency?: components["schemas"]["Currency"] & (Record<string, unknown> | null);
      /**
       * Format: email
       * @description The email of the customer
       * @example dinesh@piedpiper.test
       */
      email?: string | null;
      /**
       * @description The legal company name of the customer
       * @example Coleman-Blair
       */
      legal_name?: string | null;
      /**
       * @description The legal company number of the customer
       * @example 49-008-2965
       */
      legal_number?: string | null;
      /**
       * @description The logo URL of the customer
       * @example http://hooli.com/logo.png
       */
      logo_url?: string | null;
      /**
       * @description The full name of the customer
       * @example Gavin Belson
       */
      name?: string | null;
      /**
       * @description The phone number of the customer
       * @example 1-171-883-3711 x245
       */
      phone?: string | null;
      /**
       * @description The state of the customer's billing address
       * @example CA
       */
      state?: string | null;
      /**
       * @description The tax identification number of the customer
       * @example EU123456789
       */
      tax_identification_number?: string | null;
      timezone?: components["schemas"]["Timezone"] & (Record<string, unknown> | null);
      /**
       * @description The custom website URL of the customer
       * @example http://hooli.com
       */
      url?: string | null;
      /**
       * @description The zipcode of the customer's billing address
       * @example 91364
       */
      zipcode?: string | null;
      /**
       * @description The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
       * @example 30
       */
      net_payment_term?: number | null;
      /**
       * Format: date-time
       * @description The date of the customer creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The creation_date provides a standardized and internationally recognized timestamp for when the customer object was created
       * @example 2022-04-29T08:59:51Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @description The date of the customer update, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). The update_date provides a standardized and internationally recognized timestamp for when the customer object was updated
       * @example 2022-04-29T08:59:51Z
       */
      updated_at?: string;
      billing_configuration?: components["schemas"]["CustomerBillingConfiguration"];
      metadata?: components["schemas"]["CustomerMetadata"][];
    };
    CustomerObjectExtended: components["schemas"]["CustomerObject"] & {
      metadata?: components["schemas"]["CustomerMetadata"][];
      /** @description List of customer taxes */
      taxes?: components["schemas"]["TaxObject"][];
    };
    CustomerPastUsage: {
      usage_periods: components["schemas"]["CustomerUsage"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    CustomersPaginated: {
      customers: components["schemas"]["CustomerObjectExtended"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    CustomerUsage: {
      customer_usage: components["schemas"]["CustomerUsageObject"];
    };
    CustomerUsageObject: {
      /**
       * Format: date-time
       * @description The lower bound of the billing period, expressed in the ISO 8601 datetime format in Coordinated Universal Time (UTC).
       * @example 2022-07-01T00:00:00Z
       */
      from_datetime: string;
      /**
       * Format: date-time
       * @description The upper bound of the billing period, expressed in the ISO 8601 datetime format in Coordinated Universal Time (UTC).
       * @example 2022-07-31T23:59:59Z
       */
      to_datetime: string;
      /**
       * Format: date-time
       * @description The date of creation of the invoice.
       * @example 2022-08-01T23:59:59Z
       */
      issuing_date: string;
      /**
       * Format: uuid
       * @description A unique identifier associated with the invoice related to this particular usage record.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_invoice_id?: string | null;
      currency?: components["schemas"]["Currency"];
      /**
       * @description The amount in cents, tax excluded.
       * @example 123
       */
      amount_cents: number;
      /**
       * @description The tax amount in cents.
       * @example 200
       */
      taxes_amount_cents: number;
      /**
       * @description The total amount in cents, tax included.
       * @example 123
       */
      total_amount_cents: number;
      /** @description Array of charges that comprise the current usage. It contains detailed information about individual charge items associated with the usage. */
      charges_usage: components["schemas"]["CustomerChargeUsageObject"][];
    };
    Event: {
      event: components["schemas"]["EventObject"];
    };
    EventBatchInput: {
      event: {
        /**
         * @description This field represents a unique identifier for the event. It is crucial for ensuring idempotency, meaning that each event can be uniquely identified and processed without causing any unintended side effects.
         * @example transaction_1234567890
         */
        transaction_id: string;
        /**
         * @description The customer external unique identifier (provided by your own application). This field is optional if you send the `external_subscription_ids`, targeting a specific subscription.
         * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
         */
        external_customer_id?: string;
        /**
         * @description Array of unique identifiers of the targeted subscriptions within your application.
         * @example [
         *   "sub_1234567890",
         *   "sub_0987654321"
         * ]
         */
        external_subscription_ids: string[];
        /**
         * @description The code that identifies a targeted billable metric. It is essential that this code matches the `code` property of one of your active billable metrics. If the provided code does not correspond to any active billable metric, it will be ignored during the process.
         * @example storage
         */
        code: string;
        /**
         * @description This field captures the Unix timestamp in seconds indicating the occurrence of the event in Coordinated Universal Time (UTC). If this timestamp is not provided, the API will automatically set it to the time of event reception.
         * @example 1651240791
         */
        timestamp?: number;
        /**
         * @description This field represents additional properties associated with the event, which are utilized in the calculation of the final fee. This object becomes mandatory when the targeted billable metric employs a `sum_agg`, `max_agg`, or `unique_count_agg` aggregation method. However, when using a simple `count_agg`, this object is not required.
         * @example {
         *   "gb": 10
         * }
         */
        properties?: {
          /**
           * @description The `operation_type` field is only necessary when adding or removing a specific unit when the targeted billable metric adopts a `unique_count_agg` aggregation method. In other cases, the `operation_type` field is not required. The valid values for the `operation_type` field are `add` or `remove`, which indicate whether the unit is being added or removed from the unique count aggregation, respectively.
           * @enum {string}
           */
          operation_type?: "add" | "remove";
          [key: string]: unknown;
        };
      };
    };
    EventEstimateFeesInput: {
      event: {
        /**
         * @description The code that identifies a targeted billable metric. It is essential that this code matches the `code` property of one of your active billable metrics. If the provided code does not correspond to any active billable metric, it will be ignored during the process.
         * @example storage
         */
        code: string;
        /**
         * @description The customer external unique identifier (provided by your own application). This field is optional if you send the `external_subscription_id`, targeting a specific subscription.
         * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
         */
        external_customer_id?: string;
        /**
         * @description The unique identifier of the subscription within your application. It is a mandatory field when the customer possesses multiple subscriptions or when the `external_customer_id` is not provided.
         * @example sub_1234567890
         */
        external_subscription_id?: string;
        /** @description This field represents additional properties associated with the event, which are utilized in the calculation of the final fee. This object becomes mandatory when the targeted billable metric employs a `sum_agg`, `max_agg`, or `unique_count_agg` aggregation method. However, when using a simple `count_agg`, this object is not required. */
        properties?: Record<string, never>;
      };
    };
    EventInput: {
      event: {
        /**
         * @description This field represents a unique identifier for the event. It is crucial for ensuring idempotency, meaning that each event can be uniquely identified and processed without causing any unintended side effects.
         * @example transaction_1234567890
         */
        transaction_id: string;
        /**
         * @description The customer external unique identifier (provided by your own application). This field is optional if you send the `external_subscription_id`, targeting a specific subscription.
         * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
         */
        external_customer_id?: string;
        /**
         * @description The unique identifier of the subscription within your application. It is a mandatory field when the customer possesses multiple subscriptions or when the `external_customer_id` is not provided.
         * @example sub_1234567890
         */
        external_subscription_id?: string;
        /**
         * @description The code that identifies a targeted billable metric. It is essential that this code matches the `code` property of one of your active billable metrics. If the provided code does not correspond to any active billable metric, it will be ignored during the process.
         * @example storage
         */
        code: string;
        /**
         * @description This field captures the Unix timestamp in seconds indicating the occurrence of the event in Coordinated Universal Time (UTC).
         * If this timestamp is not provided, the API will automatically set it to the time of event reception.
         * You can also provide miliseconds precision by appending decimals to the timestamp.
         *
         * @example 1651240791.123
         */
        timestamp?: number | string;
        /**
         * @description This field represents additional properties associated with the event, which are utilized in the calculation of the final fee. This object becomes mandatory when the targeted billable metric employs a `sum_agg`, `max_agg`, or `unique_count_agg` aggregation method. However, when using a simple `count_agg`, this object is not required.
         * @example {
         *   "gb": 10
         * }
         */
        properties?: {
          [key: string]: string;
        };
      };
    };
    EventObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the event within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the event's record within the Lago system
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description This field represents a unique identifier for the event. It is crucial for ensuring idempotency, meaning that each event can be uniquely identified and processed without causing any unintended side effects.
       * @example transaction_1234567890
       */
      transaction_id: string;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer's record within the Lago system
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_customer_id: string;
      /**
       * @description The customer external unique identifier (provided by your own application). This field is optional if you send the `external_subscription_id`, targeting a specific subscription.
       * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
       */
      external_customer_id: string;
      /**
       * @description The code that identifies a targeted billable metric. It is essential that this code matches the `code` property of one of your active billable metrics. If the provided code does not correspond to any active billable metric, it will be ignored during the process.
       * @example storage
       */
      code: string;
      /**
       * Format: date-time
       * @description This field captures the Unix timestamp in seconds indicating the occurrence of the event in Coordinated Universal Time (UTC). If this timestamp is not provided, the API will automatically set it to the time of event reception.
       * @example 2022-04-29T08:59:51.123Z
       */
      timestamp: string;
      /**
       * @description This field represents additional properties associated with the event, which are utilized in the calculation of the final fee. This object becomes mandatory when the targeted billable metric employs a `sum_agg`, `max_agg`, or `unique_count_agg` aggregation method. However, when using a simple `count_agg`, this object is not required.
       * @example {
       *   "gb": 10
       * }
       */
      properties?: {
        /**
         * @description The `operation_type` field is only necessary when adding or removing a specific unit when the targeted billable metric adopts a `unique_count_agg` aggregation method. In other cases, the `operation_type` field is not required. The valid values for the `operation_type` field are `add` or `remove`, which indicate whether the unit is being added or removed from the unique count aggregation, respectively.
         * @enum {string}
         */
        operation_type?: "add" | "remove";
        [key: string]: string | undefined;
      };
      /**
       * Format: uuid
       * @description Unique identifier assigned to the subscription within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the subscriptionâ€™s record within the Lago system
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_subscription_id: string;
      /**
       * @description The unique identifier of the subscription within your application. It is a mandatory field when the customer possesses multiple subscriptions or when the `external_customer_id` is not provided.
       * @example sub_1234567890
       */
      external_subscription_id: string;
      /**
       * Format: date-time
       * @description The creation date of the event's record in the Lago application, presented in the ISO 8601 datetime format, specifically in Coordinated Universal Time (UTC). It provides the precise timestamp of when the event's record was created within the Lago application
       * @example 2022-04-29T08:59:51Z
       */
      created_at: string;
    };
    Fee: {
      fee: components["schemas"]["FeeObject"];
    };
    FeeAppliedTaxObject: {
      /**
       * Format: uuid
       * @description Unique identifier of the fee, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_fee_id?: string;
    } & components["schemas"]["BaseAppliedTax"];
    FeeObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the feeâ€™s record within the Lago system.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id?: string | null;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the group that the fee belongs to
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_group_id?: string | null;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the invoice that the fee belongs to
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_invoice_id?: string | null;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the true-up fee when a minimum has been set to the charge. This identifier helps to distinguish and manage the true-up fee associated with the charge, which may be applicable when a minimum threshold or limit is set for the charge amount.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_true_up_fee_id?: string | null;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the parent fee on which the true-up fee is assigned. This identifier establishes the relationship between the parent fee and the associated true-up fee.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_true_up_parent_fee_id?: string | null;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the subscription, created by Lago. This field is specifically displayed when the fee type is charge and the payment for the fee is made in advance (`pay_in_advance` is set to true).
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_subscription_id?: string | null;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the customer, created by Lago. This field is specifically displayed when the fee type is charge and the payment for the fee is made in advance (`pay_in_advance` is set to true).
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_customer_id?: string | null;
      /**
       * @description Unique identifier assigned to the customer in your application. This field is specifically displayed when the fee type is charge and the payment for the fee is made in advance (`pay_in_advance` is set to true).
       * @example external_id
       */
      external_customer_id?: string | null;
      /**
       * @description Unique identifier assigned to the subscription in your application. This field is specifically displayed when the fee type is charge and the payment for the fee is made in advance (`pay_in_advance` is set to true).
       * @example external_id
       */
      external_subscription_id?: string | null;
      /**
       * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
       * @example Setup Fee (SF1)
       */
      invoice_display_name?: string;
      /**
       * @description The cost of this specific fee, excluding any applicable taxes.
       * @example 100
       */
      amount_cents: number;
      amount_currency: components["schemas"]["Currency"];
      /**
       * @description The cost of the tax associated with this specific fee.
       * @example 20
       */
      taxes_amount_cents: number;
      /**
       * @description The tax rate associated with this specific fee.
       * @example 20
       */
      taxes_rate: number;
      /**
       * @description The number of units used to charge the customer. This field indicates the quantity or count of units consumed or utilized in the context of the charge. It helps in determining the basis for calculating the fee or cost associated with the usage of the service or product provided to the customer.
       * @example 0.32
       */
      units: string;
      /**
       * @description The cost of this specific fee, including any applicable taxes.
       * @example 120
       */
      total_amount_cents: number;
      total_amount_currency: components["schemas"]["Currency"];
      /**
       * @description The number of events that have been sent and used to charge the customer. This field indicates the count or quantity of events that have been processed and considered in the charging process.
       * @example 23
       */
      events_count?: number;
      /**
       * @description Flag that indicates whether the fee was paid in advance. It serves as a boolean value, where `true` represents that the fee was paid in advance (straightaway), and `false` indicates that the fee was not paid in arrears (at the end of the period).
       * @example true
       */
      pay_in_advance: boolean;
      /**
       * @description Flag that indicates whether the fee was included on the invoice. It serves as a boolean value, where `true` represents that the fee was included on the invoice, and `false` indicates that the fee was not included on the invoice.
       * @example true
       */
      invoiceable: boolean;
      /**
       * Format: date-time
       * @description The beginning date of the period that the fee covers. It is applicable only to `subscription` and `charge` fees. This field indicates the start date of the billing period or subscription period associated with the fee.
       * @example 2022-04-29T08:59:51Z
       */
      from_date?: string | null;
      /**
       * Format: date-time
       * @description The ending date of the period that the fee covers. It is applicable only to `subscription` and `charge` fees. This field indicates the end date of the billing period or subscription period associated with the fee.
       * @example 2022-05-29T08:59:51Z
       */
      to_date?: string | null;
      /**
       * @description Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and `refunded`.
       * @example pending
       * @enum {string}
       */
      payment_status: "pending" | "succeeded" | "failed" | "refunded";
      /**
       * Format: date-time
       * @description The date and time when the fee was created. It is provided in Coordinated Universal Time (UTC) format.
       * @example 2022-08-24T14:58:59Z
       */
      created_at?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the payment for the fee was successfully processed. It is provided in Coordinated Universal Time (UTC) format.
       * @example 2022-08-24T14:58:59Z
       */
      succeeded_at?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the payment for the fee failed to process. It is provided in Coordinated Universal Time (UTC) format.
       * @example 2022-08-24T14:58:59Z
       */
      failed_at?: string | null;
      /**
       * Format: date-time
       * @description The date and time when the payment for the fee was refunded. It is provided in Coordinated Universal Time (UTC) format
       * @example 2022-08-24T14:58:59Z
       */
      refunded_at?: string | null;
      /**
       * @description Unique identifier assigned to the transaction. This field is specifically displayed when the fee type is `charge` and the payment for the fee is made in advance (`pay_in_advance` is set to `true`).
       * @example transaction_1234567890
       */
      event_transaction_id?: string | null;
      /** @description Item attached to the fee */
      item: {
        /**
         * @description The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`.
         * @example subscription
         * @enum {string}
         */
        type: "charge" | "add_on" | "subscription" | "credit";
        /**
         * @description The code of the fee item. It can be the code of the `add-o`n, the code of the `charge`, the code of the `credit` or the code of the `subscription`.
         * @example startup
         */
        code: string;
        /**
         * @description The name of the fee item. It can be the name of the `add-on`, the name of the `charge`, the name of the `credit` or the name of the `subscription`.
         * @example Startup
         */
        name: string;
        /**
         * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
         * @example Setup Fee (SF1)
         */
        invoice_display_name?: string;
        /**
         * Format: uuid
         * @description Unique identifier of the fee item, created by Lago. It can be the identifier of the `add-on`, the identifier of the `charge`, the identifier of the `credit` or the identifier of the `subscription`.
         * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
         */
        lago_item_id: string;
        /**
         * @description The type of the fee item. Possible values are `AddOn`, `BillableMetric`, `WalletTransaction` or `Subscription`.
         * @example Subscription
         * @enum {string}
         */
        item_type: "AddOn" | "BillableMetric" | "Subscription" | "WalletTransaction";
      };
      /** @description List of fee applied taxes */
      applied_taxes?: components["schemas"]["FeeAppliedTaxObject"][];
    };
    Fees: {
      fees: components["schemas"]["FeeObject"][];
    };
    FeesPaginated: components["schemas"]["Fees"] & {
      meta: components["schemas"]["PaginationMeta"];
    };
    FeeUpdateInput: {
      fee: {
        /**
         * @description The payment status of the fee. Possible values are `pending`, `succeeded`, `failed` or `refunded`.
         * @example succeeded
         * @enum {string}
         */
        payment_status: "pending" | "succeeded" | "failed" | "refunded";
      };
    };
    GroupObject: {
      /**
       * Format: uuid
       * @description Unique identifier of a specific group associated with the billable metric.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description Key of a specific group associated with the billable metric.
       * @example region
       */
      key: string;
      /**
       * @description One of the values for a specific group associated with the billable metric.
       * @example us-east-1
       */
      value: string;
    };
    GroupPropertiesObject: {
      /**
       * Format: uuid
       * @description Unique identifier of a billable metric group, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      group_id: string;
      /**
       * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual group will be used as the default display name.
       * @example AWS
       */
      invoice_display_name?: string;
      values: components["schemas"]["ChargeProperties"];
    };
    GroupsPaginated: {
      groups: components["schemas"]["GroupObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    Invoice: {
      invoice: components["schemas"]["InvoiceObjectExtended"];
    };
    InvoiceAppliedTaxObject: {
      /**
       * Format: uuid
       * @description Unique identifier of the invoice, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_invoice_id?: string;
      /**
       * @description Fees total amount on which the tax is applied
       * @example 20000
       */
      fees_amount_cents?: number;
    } & components["schemas"]["BaseAppliedTax"];
    InvoiceMetadataObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the invoice metadata within the Lago application.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id?: string;
      /**
       * @description Represents the key of the metadataâ€™s key-value pair.
       * @example digital_ref_id
       */
      key?: string;
      /**
       * @description Represents the value of the metadataâ€™s key-value pair.
       * @example INV-0123456-98765
       */
      value?: string;
      /**
       * Format: date-time
       * @description The date and time when the metadata object was created. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
       * @example 2022-04-29T08:59:51Z
       */
      created_at?: string;
    };
    InvoiceObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the feeâ€™s record within the Lago system.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description This ID helps in uniquely identifying and organizing the invoices associated with a specific customer. It provides a sequential numbering system specific to the customer, allowing for easy tracking and management of invoices within the customer's context.
       * @example 2
       */
      sequential_id: number;
      /**
       * @description The unique number assigned to the invoice. This number serves as a distinct identifier for the invoice and helps in differentiating it from other invoices in the system.
       * @example LAG-1234-001-002
       */
      number: string;
      /**
       * Format: date
       * @description The date when the invoice was issued. It is provided in the ISO 8601 date format.
       * @example 2022-04-30
       */
      issuing_date: string;
      /**
       * Format: date
       * @description The payment due date for the invoice, specified in the ISO 8601 date format.
       * @example 2022-04-30
       */
      payment_due_date?: string;
      /**
       * @description The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
       * @example 30
       */
      net_payment_term?: number;
      /**
       * @description The type of invoice issued. Possible values are `subscription`, `one-off` or `credit`.
       * @example subscription
       * @enum {string}
       */
      invoice_type: "subscription" | "add_on" | "credit" | "one_off";
      /**
       * @description The status of the invoice. It indicates the current state of the invoice and can have two possible values:
       * - `draft`: the invoice is in the draft state, waiting for the end of the grace period to be finalized. During this period, events can still be ingested and added to the invoice.
       * - `finalized`: the invoice has been issued and finalized. In this state, events cannot be ingested or added to the invoice anymore.
       * @example finalized
       * @enum {string}
       */
      status: "draft" | "finalized";
      /**
       * @description The status of the payment associated with the invoice. It can have one of the following values:
       * - `pending`: the payment is pending, waiting for payment processing in Stripe or when the invoice is emitted but users have not updated the payment status through the endpoint.
       * - `succeeded`: the payment of the invoice has been successfully processed.
       * - `failed`: the payment of the invoice has failed or encountered an error during processing.
       * @example succeeded
       * @enum {string}
       */
      payment_status: "pending" | "succeeded" | "failed";
      currency: components["schemas"]["Currency"];
      /**
       * @description The total sum of fees amount in cents. It calculates the cumulative amount of all the fees associated with the invoice, providing a consolidated value.
       * @example 100
       */
      fees_amount_cents: number;
      /**
       * @description The total sum of all coupons discounted on the invoice. It calculates the cumulative discount amount applied by coupons, expressed in cents.
       * @example 10
       */
      coupons_amount_cents: number;
      /**
       * @description The total sum of all credit notes discounted on the invoice. It calculates the cumulative discount amount applied by credit notes, expressed in cents.
       * @example 10
       */
      credit_notes_amount_cents: number;
      /**
       * @description Subtotal amount, excluding taxes, expressed in cents.
       * This field depends on the version number. Here are the definitions based on the version:
       * - Version 1: is equal to the sum of `fees_amount_cents`, minus `coupons_amount_cents`, and minus `prepaid_credit_amount_cents`.
       * - Version 2: is equal to the `fees_amount_cents`.
       * - Version 3: is equal to the `fees_amount_cents`, minus `coupons_amount_cents`
       * @example 100
       */
      sub_total_excluding_taxes_amount_cents: number;
      /**
       * @description The sum of tax amount associated with the invoice, expressed in cents.
       * @example 20
       */
      taxes_amount_cents: number;
      /**
       * @description Subtotal amount, including taxes, expressed in cents.
       * This field depends on the version number. Here are the definitions based on the version:
       * - Version 1: is equal to the `total_amount_cents`.
       * - Version 2: is equal to the sum of `fees_amount_cents` and `taxes_amount_cents`.
       * - Version 3: is equal to the sum `sub_total_excluding_taxes_amount_cents` and `taxes_amount_cents`
       * @example 120
       */
      sub_total_including_taxes_amount_cents: number;
      /**
       * @description The total sum of all prepaid credits discounted on the invoice. It calculates the cumulative discount amount applied by prepaid credits, expressed in cents.
       * @example 0
       */
      prepaid_credit_amount_cents: number;
      /**
       * @description The sum of the amount and taxes amount on the invoice, expressed in cents. It calculates the total financial value of the invoice, including both the original amount and any applicable taxes.
       * @example 100
       */
      total_amount_cents: number;
      /** @example 3 */
      version_number: number;
      /**
       * Format: uri
       * @description Contains the URL that provides direct access to the invoice PDF file. You can use this URL to download or view the PDF document of the invoice
       * @example https://getlago.com/invoice/file
       */
      file_url?: string;
      customer?: components["schemas"]["CustomerObject"];
      metadata?: components["schemas"]["InvoiceMetadataObject"][];
      applied_taxes?: components["schemas"]["InvoiceAppliedTaxObject"][];
    };
    InvoiceObjectExtended: components["schemas"]["InvoiceObject"] & {
      credits?: components["schemas"]["CreditObject"][];
      fees?: components["schemas"]["FeeObject"][];
      subscriptions?: components["schemas"]["SubscriptionObject"][];
    };
    InvoiceOneOffCreateInput: {
      invoice: {
        /**
         * @description Unique identifier assigned to the customer in your application.
         * @example hooli_1234
         */
        external_customer_id: string;
        currency?: components["schemas"]["Currency"];
        fees: ({
            /**
             * @description The code of the add-on used as invoice item.
             * @example setup_fee
             */
            add_on_code: string;
            /**
             * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
             * @example Setup Fee (SF1)
             */
            invoice_display_name?: string;
            /**
             * @description The amount of the fee per unit, expressed in cents. By default, the amount of the add-on is used.
             * @example 12000
             */
            unit_amount_cents?: number | null;
            /**
             * @description The quantity of units associated with the fee. By default, only 1 unit is added to the invoice.
             * @example 2.5
             */
            units?: string | null;
            /**
             * @description This is a description
             * @example The description of the fee line item in the invoice. By default, the description of the add-on is used.
             */
            description?: string | null;
            /**
             * @description List of unique code used to identify the taxes.
             * @example [
             *   "french_standard_vat"
             * ]
             */
            tax_codes?: string[];
          })[];
      };
    };
    InvoicesPaginated: {
      invoices: components["schemas"]["InvoiceObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    InvoiceUpdateInput: {
      invoice: {
        /**
         * @description The payment status of the invoice. Possible values are `pending`, `failed` or `succeeded`.
         * @example succeeded
         * @enum {string}
         */
        payment_status?: "pending" | "succeeded" | "failed";
        metadata?: {
            /**
             * Format: uuid
             * @description The metadata object identifier. Only required when updating existing metadata.
             * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
             */
            id?: string;
            /**
             * @description The key in the key-value pair of the metadata.
             * @example digital_ref_id
             */
            key?: string;
            /**
             * @description The value in the key-value pair of the metadata.
             * @example INV-0123456-98765
             */
            value?: string;
          }[];
      };
    };
    Organization: {
      organization: components["schemas"]["OrganizationObject"];
    };
    /** @description The custom billing settings for your organization. */
    OrganizationBillingConfiguration: {
      /**
       * @description The customer invoice message that appears at the bottom of each billing documents.
       * @example This is my customer footer
       */
      invoice_footer?: string | null;
      /**
       * @description The grace period, expressed in days, for finalizing the invoice. This period refers to the additional time granted to your customers beyond the invoice due date to adjust usage and line items. Can be overwritten by the customerâ€™s grace period.
       * @example 3
       */
      invoice_grace_period?: number;
      /**
       * @description The locale of the billing documents, expressed in the ISO 639-1 format. This field indicates the language or regional variant used for the documents content issued or the embeddable customer portal.
       * @example en
       */
      document_locale?: string;
    };
    OrganizationObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the organization within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the organization's record within the Lago system
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The name of your organization.
       * @example Name1
       */
      name: string;
      /**
       * Format: date-time
       * @description The date of creation of your organization, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
       * @example 2022-05-02T13:04:09Z
       */
      created_at: string | null;
      /**
       * @description The URL of your newest updated webhook endpoint. This URL allows your organization to receive important messages, notifications, or data from the Lago system. By configuring your webhook endpoint to this URL, you can ensure that your organization stays informed and receives relevant information in a timely manner.
       * @example https://webhook.brex.com
       */
      webhook_url?: string | null;
      /**
       * @description The array containing your webhooks URLs.
       * @example [
       *   "https://webhook.brex.com",
       *   "https://webhook2.brex.com"
       * ]
       */
      webhook_urls?: string[] | null;
      country?: components["schemas"]["Country"] & (Record<string, unknown> | null);
      /**
       * @description The first line of your organizationâ€™s billing address.
       * @example 100 Brex Street
       */
      address_line1?: string | null;
      /**
       * @description The second line of your organizationâ€™s billing address.
       * @example null
       */
      address_line2?: string | null;
      /**
       * @description The state of your organizationâ€™s billing address.
       * @example NYC
       */
      state?: string | null;
      /**
       * @description The zipcode of your organizationâ€™s billing address.
       * @example 10000
       */
      zipcode?: string | null;
      /**
       * Format: email
       * @description The email address of your organization used to bill your customers.
       * @example brex@brex.com
       */
      email?: string | null;
      /**
       * @description The city of your organizationâ€™s billing address.
       * @example New York
       */
      city?: string | null;
      /**
       * @description The legal name of your organization.
       * @example null
       */
      legal_name?: string | null;
      /**
       * @description The legal number of your organization.
       * @example null
       */
      legal_number?: string | null;
      /**
       * @description The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
       * @example 30
       */
      net_payment_term?: number;
      /**
       * @description The tax identification number of your organization.
       * @example US123456789
       */
      tax_identification_number?: string | null;
      timezone?: components["schemas"]["Timezone"];
      billing_configuration: components["schemas"]["OrganizationBillingConfiguration"];
      /** @description List of default organization taxes */
      taxes?: components["schemas"]["TaxObject"][];
    };
    OrganizationUpdateInput: {
      organization: {
        /**
         * @description The URL of your newest updated webhook endpoint. This URL allows your organization to receive important messages, notifications, or data from the Lago system. By configuring your webhook endpoint to this URL, you can ensure that your organization stays informed and receives relevant information in a timely manner.
         * @example https://webhook.brex.com
         */
        webhook_url?: string | null;
        country?: components["schemas"]["Country"] & (Record<string, unknown> | null);
        /**
         * @description The first line of your organizationâ€™s billing address.
         * @example 100 Brex Street
         */
        address_line1?: string | null;
        /**
         * @description The second line of your organizationâ€™s billing address.
         * @example null
         */
        address_line2?: string | null;
        /**
         * @description The state of your organizationâ€™s billing address.
         * @example NYC
         */
        state?: string | null;
        /**
         * @description The zipcode of your organizationâ€™s billing address.
         * @example 10000
         */
        zipcode?: string | null;
        /**
         * Format: email
         * @description The email address of your organization used to bill your customers.
         * @example brex@brex.com
         */
        email?: string | null;
        /**
         * @description The city of your organizationâ€™s billing address.
         * @example New York
         */
        city?: string | null;
        /**
         * @description The legal name of your organization.
         * @example null
         */
        legal_name?: string | null;
        /**
         * @description The legal number of your organization.
         * @example null
         */
        legal_number?: string | null;
        /**
         * @description The net payment term, expressed in days, specifies the duration within which a customer is expected to remit payment after the invoice is finalized.
         * @example 30
         */
        net_payment_term?: number;
        /**
         * @description The tax identification number of your organization.
         * @example US123456789
         */
        tax_identification_number?: string | null;
        timezone?: components["schemas"]["Timezone"];
        /**
         * @description Represents the email settings of the organization. It allows you to define which documents are sent by email. The field value determines the types of documents that trigger email notifications. Possible values for are `invoice.finalized` and `credit_note.created`. By configuring this field, you can specify whether invoices, credit notes, or both should be sent to recipients via email.
         * @example [
         *   "invoice.finalized",
         *   "credit_note.created"
         * ]
         */
        email_settings?: ("invoice.finalized" | "credit_note.created")[];
        billing_configuration?: components["schemas"]["OrganizationBillingConfiguration"];
      };
    };
    PaginationMeta: {
      /**
       * @description Current page.
       * @example 2
       */
      current_page: number;
      /**
       * @description Next page.
       * @example 3
       */
      next_page?: number | null;
      /**
       * @description Previous page.
       * @example 1
       */
      prev_page?: number | null;
      /**
       * @description Total number of pages.
       * @example 4
       */
      total_pages: number;
      /**
       * @description Total number of records.
       * @example 70
       */
      total_count: number;
    };
    Plan: {
      plan: components["schemas"]["PlanObject"];
    };
    PlanCreateInput: {
      plan: {
        /**
         * @description The name of the plan.
         * @example Startup
         */
        name?: string;
        /**
         * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.
         * @example Startup plan
         */
        invoice_display_name?: string;
        /**
         * @description The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance.
         * @example startup
         */
        code?: string;
        /**
         * @description The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly`, or `weekly`.
         * @example monthly
         * @enum {string}
         */
        interval?: "weekly" | "monthly" | "quarterly" | "yearly";
        /**
         * @description The description on the plan.
         * @example Plan for early stage startups.
         */
        description?: string;
        /**
         * @description The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.
         * @example 10000
         */
        amount_cents?: number;
        amount_currency?: components["schemas"]["Currency"];
        /**
         * @description The duration in days during which the base cost of the plan is offered for free.
         * @example 5
         */
        trial_period?: number;
        /**
         * @description This field determines the billing timing for the plan. When set to `true`, the base cost of the plan is due at the beginning of each billing period. Conversely, when set to `false`, the base cost of the plan is due at the end of each billing period.
         * @example true
         */
        pay_in_advance?: boolean;
        /**
         * @description This field, when set to `true`, enables to invoice usage-based charges on monthly basis, even if the cadence of the plan is yearly. This allows customers to pay charges overage on a monthly basis. This can be set to true only if the planâ€™s interval is `yearly`.
         * @example null
         */
        bill_charges_monthly?: boolean | null;
        /**
         * @description List of unique code used to identify the taxes.
         * @example [
         *   "french_standard_vat"
         * ]
         */
        tax_codes?: string[];
        /**
         * @description Additional usage-based charges for this plan.
         * @example [
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a91",
         *     "charge_model": "package",
         *     "invoiceable": true,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": false,
         *     "prorated": false,
         *     "min_amount_cents": 3000,
         *     "properties": {
         *       "amount": "30",
         *       "free_units": 100,
         *       "package_size": 1000
         *     },
         *     "group_properties": [],
         *     "tax_codes": [
         *       "french_standard_vat"
         *     ]
         *   },
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a92",
         *     "charge_model": "graduated",
         *     "invoiceable": true,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": false,
         *     "prorated": false,
         *     "min_amount_cents": 0,
         *     "properties": {
         *       "graduated_ranges": [
         *         {
         *           "to_value": 10,
         *           "from_value": 0,
         *           "flat_amount": "10",
         *           "per_unit_amount": "0.5"
         *         },
         *         {
         *           "to_value": null,
         *           "from_value": 11,
         *           "flat_amount": "0",
         *           "per_unit_amount": "0.4"
         *         }
         *       ]
         *     },
         *     "group_properties": []
         *   },
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a93",
         *     "charge_model": "standard",
         *     "invoiceable": true,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": true,
         *     "prorated": false,
         *     "min_amount_cents": 0,
         *     "properties": {},
         *     "group_properties": [
         *       {
         *         "group_id": "1a901a90-1a90-1a90-1a90-1a901a901a01",
         *         "invoice_display_name": "Europe",
         *         "values": {
         *           "amount": "10"
         *         }
         *       },
         *       {
         *         "group_id": "1a901a90-1a90-1a90-1a90-1a901a901a02",
         *         "invoice_display_name": "USA",
         *         "values": {
         *           "amount": "5"
         *         }
         *       },
         *       {
         *         "group_id": "1a901a90-1a90-1a90-1a90-1a901a901a03",
         *         "invoice_display_name": "Africa",
         *         "values": {
         *           "amount": "8"
         *         }
         *       }
         *     ]
         *   },
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a94",
         *     "charge_model": "volume",
         *     "invoiceable": true,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": false,
         *     "prorated": false,
         *     "min_amount_cents": 0,
         *     "properties": {
         *       "volume_ranges": [
         *         {
         *           "from_value": 0,
         *           "to_value": 100,
         *           "flat_amount": "0",
         *           "per_unit_amount": "0"
         *         },
         *         {
         *           "from_value": 101,
         *           "to_value": null,
         *           "flat_amount": "0",
         *           "per_unit_amount": "0.5"
         *         }
         *       ]
         *     },
         *     "group_properties": []
         *   },
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a95",
         *     "charge_model": "percentage",
         *     "invoiceable": false,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": true,
         *     "prorated": false,
         *     "min_amount_cents": 0,
         *     "properties": {
         *       "rate": "1",
         *       "fixed_amount": "0.5",
         *       "free_units_per_events": 5,
         *       "free_units_per_total_aggregation": "500"
         *     },
         *     "group_properties": []
         *   }
         * ]
         */
        charges?: ({
            /**
             * Format: uuid
             * @description Unique identifier of the billable metric created by Lago.
             * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
             */
            billable_metric_id?: string;
            /**
             * @description Specifies the pricing model used for the calculation of the final fee. It can be `standard`, `graduated`, `graduated_percentage` `package`, `percentage` or `volume`.
             * @example standard
             * @enum {string}
             */
            charge_model?: "standard" | "graduated" | "graduated_percentage" | "package" | "percentage" | "volume";
            /**
             * @description This field determines the billing timing for this specific usage-based charge. When set to `true`, the charge is due and invoiced immediately. Conversely, when set to false, the charge is due and invoiced at the end of each billing period.
             * @example false
             */
            pay_in_advance?: boolean;
            /**
             * @description This field specifies whether the charge should be included in a proper invoice. If set to false, no invoice will be issued for this charge. You can only set it to `false` when `pay_in_advance` is `true`.
             * @example true
             */
            invoiceable?: boolean;
            /**
             * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
             * @example Setup
             */
            invoice_display_name?: string;
            /**
             * @description Specifies whether a charge is prorated based on the remaining number of days in the billing period or billed fully.
             *
             * - If set to `true`, the charge is prorated based on the remaining days in the current billing period.
             * - If set to `false`, the charge is billed in full.
             * - If not defined in the request, default value is `false`.
             * @example false
             */
            prorated?: boolean;
            /**
             * @description The minimum spending amount required for the charge, measured in cents and excluding any applicable taxes. It indicates the minimum amount that needs to be charged for each billing period.
             * @example 0
             */
            min_amount_cents?: number;
            properties?: components["schemas"]["ChargeProperties"];
            /** @description All charge information, sorted by groups. */
            group_properties?: {
                /**
                 * @description Unique identifier of a billable metric group, created by Lago.
                 * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
                 */
                group_id: string;
                values: components["schemas"]["ChargeProperties"];
              }[];
            /**
             * @description List of unique code used to identify the taxes.
             * @example [
             *   "french_standard_vat"
             * ]
             */
            tax_codes?: string[];
          })[];
      };
    };
    PlanUpdateInput: {
      plan: {
        /**
         * @description The name of the plan.
         * @example Startup
         */
        name?: string;
        /**
         * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.
         * @example Startup plan
         */
        invoice_display_name?: string;
        /**
         * @description The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance.
         * @example startup
         */
        code?: string;
        /**
         * @description The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly`, or `weekly`.
         * @example monthly
         * @enum {string}
         */
        interval?: "weekly" | "monthly" | "quarterly" | "yearly";
        /**
         * @description The description on the plan.
         * @example Plan for early stage startups.
         */
        description?: string;
        /**
         * @description The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.
         * @example 10000
         */
        amount_cents?: number;
        amount_currency?: components["schemas"]["Currency"];
        /**
         * @description The duration in days during which the base cost of the plan is offered for free.
         * @example 5
         */
        trial_period?: number;
        /**
         * @description This field determines the billing timing for the plan. When set to `true`, the base cost of the plan is due at the beginning of each billing period. Conversely, when set to `false`, the base cost of the plan is due at the end of each billing period.
         * @example true
         */
        pay_in_advance?: boolean;
        /**
         * @description This field, when set to `true`, enables to invoice usage-based charges on monthly basis, even if the cadence of the plan is yearly. This allows customers to pay charges overage on a monthly basis. This can be set to true only if the planâ€™s interval is `yearly`.
         * @example null
         */
        bill_charges_monthly?: boolean | null;
        /**
         * @description List of unique code used to identify the taxes.
         * @example [
         *   "french_standard_vat"
         * ]
         */
        tax_codes?: string[];
        /**
         * @description Additional usage-based charges for this plan.
         * @example [
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a91",
         *     "charge_model": "package",
         *     "invoiceable": true,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": false,
         *     "prorated": false,
         *     "min_amount_cents": 3000,
         *     "properties": {
         *       "amount": "30",
         *       "free_units": 100,
         *       "package_size": 1000
         *     },
         *     "group_properties": [],
         *     "tax_codes": [
         *       "french_standard_vat"
         *     ]
         *   },
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a92",
         *     "charge_model": "graduated",
         *     "invoiceable": true,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": false,
         *     "prorated": false,
         *     "min_amount_cents": 0,
         *     "properties": {
         *       "graduated_ranges": [
         *         {
         *           "to_value": 10,
         *           "from_value": 0,
         *           "flat_amount": "10",
         *           "per_unit_amount": "0.5"
         *         },
         *         {
         *           "to_value": null,
         *           "from_value": 11,
         *           "flat_amount": "0",
         *           "per_unit_amount": "0.4"
         *         }
         *       ]
         *     },
         *     "group_properties": []
         *   },
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a93",
         *     "charge_model": "standard",
         *     "invoiceable": true,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": true,
         *     "prorated": false,
         *     "min_amount_cents": 0,
         *     "properties": {},
         *     "group_properties": [
         *       {
         *         "group_id": "1a901a90-1a90-1a90-1a90-1a901a901a01",
         *         "invoice_display_name": "Europe",
         *         "values": {
         *           "amount": "10"
         *         }
         *       },
         *       {
         *         "group_id": "1a901a90-1a90-1a90-1a90-1a901a901a02",
         *         "invoice_display_name": "USA",
         *         "values": {
         *           "amount": "5"
         *         }
         *       },
         *       {
         *         "group_id": "1a901a90-1a90-1a90-1a90-1a901a901a03",
         *         "invoice_display_name": "Africa",
         *         "values": {
         *           "amount": "8"
         *         }
         *       }
         *     ]
         *   },
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a94",
         *     "charge_model": "volume",
         *     "invoiceable": true,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": false,
         *     "prorated": false,
         *     "min_amount_cents": 0,
         *     "properties": {
         *       "volume_ranges": [
         *         {
         *           "from_value": 0,
         *           "to_value": 100,
         *           "flat_amount": "0",
         *           "per_unit_amount": "0"
         *         },
         *         {
         *           "from_value": 101,
         *           "to_value": null,
         *           "flat_amount": "0",
         *           "per_unit_amount": "0.5"
         *         }
         *       ]
         *     },
         *     "group_properties": []
         *   },
         *   {
         *     "billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a95",
         *     "charge_model": "percentage",
         *     "invoiceable": false,
         *     "invoice_display_name": "Setup",
         *     "pay_in_advance": true,
         *     "prorated": false,
         *     "min_amount_cents": 0,
         *     "properties": {
         *       "rate": "1",
         *       "fixed_amount": "0.5",
         *       "free_units_per_events": 5,
         *       "free_units_per_total_aggregation": "500"
         *     },
         *     "group_properties": []
         *   }
         * ]
         */
        charges?: ({
            /**
             * Format: uuid
             * @description Unique identifier of the charge created by Lago.
             * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
             */
            id?: string;
            /**
             * Format: uuid
             * @description Unique identifier of the billable metric created by Lago.
             * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
             */
            billable_metric_id?: string;
            /**
             * @description Specifies the pricing model used for the calculation of the final fee. It can be `standard`, `graduated`, `graduated_percentage`, `package`, `percentage` or `volume`.
             * @example standard
             * @enum {string}
             */
            charge_model?: "standard" | "graduated" | "graduated_percentage" | "package" | "percentage" | "volume";
            /**
             * @description This field determines the billing timing for this specific usage-based charge. When set to `true`, the charge is due and invoiced immediately. Conversely, when set to false, the charge is due and invoiced at the end of each billing period.
             * @example false
             */
            pay_in_advance?: boolean;
            /**
             * @description This field specifies whether the charge should be included in a proper invoice. If set to false, no invoice will be issued for this charge. You can only set it to `false` when `pay_in_advance` is `true`.
             * @example true
             */
            invoiceable?: boolean;
            /**
             * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the actual charge will be used as the default display name.
             * @example Setup
             */
            invoice_display_name?: string;
            /**
             * @description Specifies whether a charge is prorated based on the remaining number of days in the billing period or billed fully.
             *
             * - If set to `true`, the charge is prorated based on the remaining days in the current billing period.
             * - If set to `false`, the charge is billed in full.
             * - If not defined in the request, default value is `false`.
             * @example false
             */
            prorated?: boolean;
            /**
             * @description The minimum spending amount required for the charge, measured in cents and excluding any applicable taxes. It indicates the minimum amount that needs to be charged for each billing period.
             * @example 0
             */
            min_amount_cents?: number;
            properties?: components["schemas"]["ChargeProperties"];
            /** @description All charge information, sorted by groups. */
            group_properties?: {
                /**
                 * @description Unique identifier of a billable metric group, created by Lago.
                 * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
                 */
                group_id: string;
                values: components["schemas"]["ChargeProperties"];
              }[];
            /**
             * @description List of unique code used to identify the taxes.
             * @example [
             *   "french_standard_vat"
             * ]
             */
            tax_codes?: string[];
          })[];
      };
    };
    PlanObject: {
      /**
       * Format: uuid
       * @description Unique identifier of the plan created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The name of the plan.
       * @example Startup
       */
      name: string;
      /**
       * @description Specifies the name that will be displayed on an invoice. If no value is set for this field, the name of the plan will be used as the default display name.
       * @example Startup plan
       */
      invoice_display_name?: string;
      /**
       * Format: date-time
       * @description The date and time when the plan was created. It is expressed in UTC format according to the ISO 8601 datetime standard. This field provides the timestamp for the exact moment when the plan was initially created.
       * @example 2023-06-27T19:43:42Z
       */
      created_at: string;
      /**
       * @description The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance.
       * @example startup
       */
      code: string;
      /**
       * @description The interval used for recurring billing. It represents the frequency at which subscription billing occurs. The interval can be one of the following values: `yearly`, `quarterly`, `monthly` or `weekly`.
       * @example monthly
       * @enum {string}
       */
      interval: "weekly" | "monthly" | "quarterly" | "yearly";
      /**
       * @description The description on the plan.
       * @example
       */
      description?: string;
      /**
       * @description The base cost of the plan, excluding any applicable taxes, that is billed on a recurring basis. This value is defined at 0 if your plan is a pay-as-you-go plan.
       * @example 10000
       */
      amount_cents: number;
      amount_currency: components["schemas"]["Currency"];
      /**
       * @description The duration in days during which the base cost of the plan is offered for free.
       * @example 5
       */
      trial_period?: number;
      /**
       * @description This field determines the billing timing for the plan. When set to `true`, the base cost of the plan is due at the beginning of each billing period. Conversely, when set to `false`, the base cost of the plan is due at the end of each billing period.
       * @example true
       */
      pay_in_advance?: boolean;
      /**
       * @description This field, when set to `true`, enables to invoice usage-based charges on monthly basis, even if the cadence of the plan is yearly. This allows customers to pay charges overage on a monthly basis. This can be set to true only if the planâ€™s interval is `yearly`.
       * @example null
       */
      bill_charges_monthly?: boolean | null;
      /**
       * @description The count of active subscriptions that are currently associated with the plan. This field provides valuable information regarding the impact of deleting the plan. By checking the value of this field, you can determine the number of subscriptions that will be affected if the plan is deleted.
       * @example 0
       */
      active_subscriptions_count: number;
      /**
       * @description The number of draft invoices that include a subscription attached to the plan. This field provides valuable information about the impact of deleting the plan. By checking the value of this field, you can determine the number of draft invoices that will be affected if the plan is deleted.
       * @example 0
       */
      draft_invoices_count: number;
      /**
       * @description Additional usage-based charges for this plan.
       * @example [
       *   {
       *     "lago_id": "1a901a90-1a90-1a90-1a90-1a901a901a91",
       *     "lago_billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a91",
       *     "billable_metric_code": "requests",
       *     "created_at": "2023-06-27T19:43:42Z",
       *     "charge_model": "package",
       *     "invoiceable": true,
       *     "invoice_display_name": "Setup",
       *     "pay_in_advance": false,
       *     "prorated": false,
       *     "min_amount_cents": 3000,
       *     "properties": {
       *       "amount": "30",
       *       "free_units": 100,
       *       "package_size": 1000
       *     },
       *     "group_properties": []
       *   },
       *   {
       *     "lago_id": "1a901a90-1a90-1a90-1a90-1a901a901a92",
       *     "lago_billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a92",
       *     "billable_metric_code": "cpu",
       *     "created_at": "2023-06-27T19:43:42Z",
       *     "charge_model": "graduated",
       *     "invoiceable": true,
       *     "invoice_display_name": "Setup",
       *     "pay_in_advance": false,
       *     "prorated": false,
       *     "min_amount_cents": 0,
       *     "properties": {
       *       "graduated_ranges": [
       *         {
       *           "from_value": 0,
       *           "to_value": 10,
       *           "flat_amount": "10",
       *           "per_unit_amount": "0.5"
       *         },
       *         {
       *           "from_value": 11,
       *           "to_value": null,
       *           "flat_amount": "0",
       *           "per_unit_amount": "0.4"
       *         }
       *       ]
       *     },
       *     "group_properties": []
       *   },
       *   {
       *     "lago_id": "1a901a90-1a90-1a90-1a90-1a901a901a93",
       *     "lago_billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a93",
       *     "billable_metric_code": "seats",
       *     "created_at": "2023-06-27T19:43:42Z",
       *     "charge_model": "standard",
       *     "invoiceable": true,
       *     "invoice_display_name": "Setup",
       *     "pay_in_advance": true,
       *     "prorated": false,
       *     "min_amount_cents": 0,
       *     "properties": {},
       *     "group_properties": [
       *       {
       *         "group_id": "1a901a90-1a90-1a90-1a90-1a901a901a01",
       *         "invoice_display_name": "Europe",
       *         "values": {
       *           "amount": "10"
       *         }
       *       },
       *       {
       *         "group_id": "1a901a90-1a90-1a90-1a90-1a901a901a02",
       *         "invoice_display_name": "USA",
       *         "values": {
       *           "amount": "5"
       *         }
       *       },
       *       {
       *         "group_id": "1a901a90-1a90-1a90-1a90-1a901a901a03",
       *         "invoice_display_name": "Africa",
       *         "values": {
       *           "amount": "8"
       *         }
       *       }
       *     ]
       *   },
       *   {
       *     "lago_id": "1a901a90-1a90-1a90-1a90-1a901a901a94",
       *     "lago_billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a94",
       *     "billable_metric_code": "storage",
       *     "created_at": "2023-06-27T19:43:42Z",
       *     "charge_model": "volume",
       *     "invoiceable": true,
       *     "invoice_display_name": "Setup",
       *     "pay_in_advance": false,
       *     "prorated": false,
       *     "min_amount_cents": 0,
       *     "properties": {
       *       "volume_ranges": [
       *         {
       *           "from_value": 0,
       *           "to_value": 100,
       *           "flat_amount": "0",
       *           "per_unit_amount": "0"
       *         },
       *         {
       *           "from_value": 101,
       *           "to_value": null,
       *           "flat_amount": "0",
       *           "per_unit_amount": "0.5"
       *         }
       *       ]
       *     },
       *     "group_properties": []
       *   },
       *   {
       *     "lago_id": "1a901a90-1a90-1a90-1a90-1a901a901a95",
       *     "lago_billable_metric_id": "1a901a90-1a90-1a90-1a90-1a901a901a95",
       *     "billable_metric_code": "payments",
       *     "created_at": "2023-06-27T19:43:42Z",
       *     "charge_model": "percentage",
       *     "invoiceable": false,
       *     "invoice_display_name": "Setup",
       *     "pay_in_advance": true,
       *     "prorated": false,
       *     "min_amount_cents": 0,
       *     "properties": {
       *       "rate": "1",
       *       "fixed_amount": "0.5",
       *       "free_units_per_events": 5,
       *       "free_units_per_total_aggregation": "500"
       *     },
       *     "group_properties": []
       *   }
       * ]
       */
      charges?: components["schemas"]["ChargeObject"][];
      /** @description All taxes applied to the plan. */
      taxes?: components["schemas"]["TaxObject"][];
    };
    PlansPaginated: {
      plans: components["schemas"]["PlanObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    Subscription: {
      subscription: components["schemas"]["SubscriptionObject"];
    };
    SubscriptionCreateInput: {
      subscription: {
        /**
         * @description The customer external unique identifier (provided by your own application)
         * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
         */
        external_customer_id: string;
        /**
         * @description The unique code representing the plan to be attached to the customer. This code must correspond to the `code` property of one of the active plans.
         * @example premium
         */
        plan_code: string;
        /**
         * @description The display name of the subscription on an invoice. This field allows for customization of the subscription's name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.
         * @example Repository A
         */
        name?: string;
        /**
         * @description The unique external identifier for the subscription. This identifier serves as an idempotency key, ensuring that each subscription is unique.
         * @example my_sub_1234567890
         */
        external_id: string;
        /**
         * @description The billing time for the subscription, which can be set as either `anniversary` or `calendar`. If not explicitly provided, it will default to `calendar`. The billing time determines the timing of recurring billing cycles for the subscription. By specifying `anniversary`, the billing cycle will be based on the specific date the subscription started (billed fully), while `calendar` sets the billing cycle at the first day of the week/month/year (billed with proration).
         * @example anniversary
         * @enum {string}
         */
        billing_time?: "calendar" | "anniversary";
        /**
         * Format: date-time
         * @description The effective end date of the subscription. If this field is set to null, the subscription will automatically renew. This date should be provided in ISO 8601 datetime format, and use Coordinated Universal Time (UTC).
         * @example 2022-10-08T00:00:00Z
         */
        ending_at?: string;
        /**
         * Format: date-time
         * @description The start date for the subscription, allowing for the creation of subscriptions that can begin in the past or future. Please note that it cannot be used to update the start date of a pending subscription or schedule an upgrade/downgrade. The start_date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
         * @example 2022-08-08T00:00:00Z
         */
        subscription_at?: string;
      };
    };
    SubscriptionUpdateInput: {
      subscription: {
        /**
         * @description The display name of the subscription on an invoice. This field allows for customization of the subscription's name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.
         * @example Repository B
         */
        name?: string | null;
        /**
         * Format: date-time
         * @description The effective end date of the subscription. If this field is set to null, the subscription will automatically renew. This date should be provided in ISO 8601 datetime format, and use Coordinated Universal Time (UTC).
         * @example 2022-10-08T00:00:00Z
         */
        ending_at?: string;
        /**
         * Format: date-time
         * @description The start date and time of the subscription. This field can only be modified for pending subscriptions that have not yet started. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
         * @example 2022-08-08T00:00:00Z
         */
        subscription_at?: string;
      };
    };
    SubscriptionObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the subscription within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the subscriptionâ€™s record within the Lago system
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description The subscription external unique identifier (provided by your own application).
       * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
       */
      external_id: string;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customer's record within the Lago system
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_customer_id: string;
      /**
       * @description The customer external unique identifier (provided by your own application).
       * @example 5eb02857-a71e-4ea2-bcf9-57d3a41bc6ba
       */
      external_customer_id: string;
      /**
       * @description The billing time for the subscription, which can be set as either `anniversary` or `calendar`. If not explicitly provided, it will default to `calendar`. The billing time determines the timing of recurring billing cycles for the subscription. By specifying `anniversary`, the billing cycle will be based on the specific date the subscription started (billed fully), while `calendar` sets the billing cycle at the first day of the week/month/year (billed with proration).
       * @example anniversary
       * @enum {string}
       */
      billing_time: "calendar" | "anniversary";
      /**
       * @description The display name of the subscription on an invoice. This field allows for customization of the subscription's name for billing purposes, especially useful when a single customer has multiple subscriptions using the same plan.
       * @example Repository A
       */
      name?: string | null;
      /**
       * @description The unique code representing the plan to be attached to the customer. This code must correspond to the `code` property of one of the active plans.
       * @example premium
       */
      plan_code: string;
      /**
       * @description The status of the subscription, which can have the following values:
       * - `pending`: a previous subscription has been downgraded, and the current one is awaiting automatic activation at the end of the billing period.
       * - `active`: the subscription is currently active and applied to the customer.
       * - `terminated`: the subscription is no longer active.
       * - `canceled`: the subscription has been stopped before its activation. This can occur when two consecutive downgrades have been applied to a customer or when a subscription with a pending status is terminated.
       * @example active
       * @enum {string}
       */
      status: "active" | "pending" | "terminated" | "canceled";
      /**
       * Format: date-time
       * @description The creation date of the subscription, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC). This date provides a timestamp indicating when the subscription was initially created.
       * @example 2022-08-08T00:00:00Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @description The cancellation date of the subscription. This field is not null when the subscription is `canceled`. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
       * @example 2022-09-14T16:35:31Z
       */
      canceled_at?: string | null;
      /**
       * Format: date-time
       * @description The effective start date of the subscription. This field can be null if the subscription is `pending` or `canceled`. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
       * @example 2022-08-08T00:00:00Z
       */
      started_at?: string | null;
      /**
       * Format: date-time
       * @description The effective end date of the subscription. If this field is set to null, the subscription will automatically renew. This date should be provided in ISO 8601 datetime format, and use Coordinated Universal Time (UTC).
       * @example 2022-10-08T00:00:00Z
       */
      ending_at?: string;
      /**
       * Format: date-time
       * @description The anniversary date and time of the initial subscription. This date serves as the basis for billing subscriptions with `anniversary` billing time. The `anniversary_date` should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
       * @example 2022-08-08T00:00:00Z
       */
      subscription_at: string;
      /**
       * Format: date-time
       * @description The termination date of the subscription. This field is not null when the subscription is `terminated`. This date should be provided in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC)
       * @example 2022-09-14T16:35:31Z
       */
      terminated_at?: string | null;
      /**
       * @description The code identifying the previous plan associated with this subscription.
       * @example null
       */
      previous_plan_code?: string | null;
      /**
       * @description The code identifying the next plan in the case of a downgrade.
       * @example null
       */
      next_plan_code?: string | null;
      /**
       * Format: date-time
       * @description The date when the plan will be downgraded, represented in ISO 8601 date format.
       * @example null
       */
      downgrade_plan_date?: string | null;
    };
    SubscriptionsPaginated: {
      subscriptions: components["schemas"]["SubscriptionObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    Tax: {
      tax: components["schemas"]["TaxObject"];
    };
    TaxBaseInput: {
      /**
       * @description Name of the tax.
       * @example TVA
       */
      name?: string;
      /**
       * @description Unique code used to identify the tax associated with the API request.
       * @example french_standard_vat
       */
      code?: string;
      /**
       * @description The percentage rate of the tax
       * @example 20.0
       */
      rate?: string;
      /**
       * @description Internal description of the taxe
       * @example French standard VAT
       */
      description?: string | null;
      /**
       * @description Set to `true` if the tax is used as one of the organization's default
       * @example true
       */
      applied_to_organization?: boolean;
    };
    TaxCreateInput: {
      tax: components["schemas"]["TaxBaseInput"];
    };
    TaxesPaginated: {
      taxes: components["schemas"]["TaxObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    TaxObject: {
      /**
       * Format: uuid
       * @description Unique identifier of the tax, created by Lago.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * @description Name of the tax.
       * @example TVA
       */
      name: string;
      /**
       * @description Unique code used to identify the tax associated with the API request.
       * @example french_standard_vat
       */
      code: string;
      /**
       * @description Internal description of the taxe
       * @example French standard VAT
       */
      description?: string;
      /**
       * @description The percentage rate of the tax
       * @example 20
       */
      rate: number;
      /**
       * @description Set to `true` if the tax is used as one of the organization's default
       * @example true
       */
      applied_to_organization: boolean;
      /**
       * @description Number of add-ons this tax is applied to.
       * @example 0
       */
      add_ons_count?: number;
      /**
       * @description Number of charges this tax is applied to.
       * @example 0
       */
      charges_count?: number;
      /**
       * @description Number of customers this tax is applied to (directly or via the organization's default).
       * @example 0
       */
      customers_count: number;
      /**
       * @description Number of plans this tax is applied to.
       * @example 0
       */
      plans_count?: number;
      /**
       * Format: date-time
       * @description Creation date of the tax.
       * @example 2023-07-06T14:35:58Z
       */
      created_at: string;
    };
    TaxUpdateInput: {
      tax: components["schemas"]["TaxBaseInput"];
    };
    /**
     * @example America/Los_Angeles
     * @enum {string}
     */
    Timezone: "UTC" | "Africa/Algiers" | "Africa/Cairo" | "Africa/Casablanca" | "Africa/Harare" | "Africa/Johannesburg" | "Africa/Monrovia" | "Africa/Nairobi" | "America/Argentina/Buenos_Aires" | "America/Bogota" | "America/Caracas" | "America/Chicago" | "America/Chihuahua" | "America/Denver" | "America/Godthab" | "America/Guatemala" | "America/Guyana" | "America/Halifax" | "America/Indiana/Indianapolis" | "America/Juneau" | "America/La_Paz" | "America/Lima" | "America/Los_Angeles" | "America/Mazatlan" | "America/Mexico_City" | "America/Monterrey" | "America/Montevideo" | "America/New_York" | "America/Phoenix" | "America/Puerto_Rico" | "America/Regina" | "America/Santiago" | "America/Sao_Paulo" | "America/St_Johns" | "America/Tijuana" | "Asia/Almaty" | "Asia/Baghdad" | "Asia/Baku" | "Asia/Bangkok" | "Asia/Chongqing" | "Asia/Colombo" | "Asia/Dhaka" | "Asia/Hong_Kong" | "Asia/Irkutsk" | "Asia/Jakarta" | "Asia/Jerusalem" | "Asia/Kabul" | "Asia/Kamchatka" | "Asia/Karachi" | "Asia/Kathmandu" | "Asia/Kolkata" | "Asia/Krasnoyarsk" | "Asia/Kuala_Lumpur" | "Asia/Kuwait" | "Asia/Magadan" | "Asia/Muscat" | "Asia/Novosibirsk" | "Asia/Rangoon" | "Asia/Riyadh" | "Asia/Seoul" | "Asia/Shanghai" | "Asia/Singapore" | "Asia/Srednekolymsk" | "Asia/Taipei" | "Asia/Tashkent" | "Asia/Tbilisi" | "Asia/Tehran" | "Asia/Tokyo" | "Asia/Ulaanbaatar" | "Asia/Urumqi" | "Asia/Vladivostok" | "Asia/Yakutsk" | "Asia/Yekaterinburg" | "Asia/Yerevan" | "Atlantic/Azores" | "Atlantic/Cape_Verde" | "Atlantic/South_Georgia" | "Australia/Adelaide" | "Australia/Brisbane" | "Australia/Darwin" | "Australia/Hobart" | "Australia/Melbourne" | "Australia/Perth" | "Australia/Sydney" | "Europe/Amsterdam" | "Europe/Athens" | "Europe/Belgrade" | "Europe/Berlin" | "Europe/Bratislava" | "Europe/Brussels" | "Europe/Bucharest" | "Europe/Budapest" | "Europe/Copenhagen" | "Europe/Dublin" | "Europe/Helsinki" | "Europe/Istanbul" | "Europe/Kaliningrad" | "Europe/Kiev" | "Europe/Lisbon" | "Europe/Ljubljana" | "Europe/London" | "Europe/Madrid" | "Europe/Minsk" | "Europe/Moscow" | "Europe/Paris" | "Europe/Prague" | "Europe/Riga" | "Europe/Rome" | "Europe/Samara" | "Europe/Sarajevo" | "Europe/Skopje" | "Europe/Sofia" | "Europe/Stockholm" | "Europe/Tallinn" | "Europe/Vienna" | "Europe/Vilnius" | "Europe/Volgograd" | "Europe/Warsaw" | "Europe/Zagreb" | "Europe/Zurich" | "GMT+12" | "Pacific/Apia" | "Pacific/Auckland" | "Pacific/Chatham" | "Pacific/Fakaofo" | "Pacific/Fiji" | "Pacific/Guadalcanal" | "Pacific/Guam" | "Pacific/Honolulu" | "Pacific/Majuro" | "Pacific/Midway" | "Pacific/Noumea" | "Pacific/Pago_Pago" | "Pacific/Port_Moresby" | "Pacific/Tongatapu";
    Wallet: {
      wallet: components["schemas"]["WalletObject"];
    };
    WalletCreateInput: {
      wallet?: {
        /**
         * @description The name of the wallet.
         * @example Prepaid
         */
        name?: string;
        /**
         * @description The rate of conversion between credits and the amount in the specified currency. It indicates the ratio or factor used to convert credits into the corresponding monetary value in the currency of the transaction.
         * @example 1.5
         */
        rate_amount: string;
        currency: components["schemas"]["Currency"];
        /**
         * @description The number of paid credits. Required only if there is no granted credits.
         * @example 20.0
         */
        paid_credits?: string | null;
        /**
         * @description The number of free granted credits. Required only if there is no paid credits.
         * @example 10.0
         */
        granted_credits?: string | null;
        /**
         * @description The customer external unique identifier (provided by your own application)
         * @example hooli_1234
         */
        external_customer_id: string;
        /**
         * Format: date-time
         * @description The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
         * @example 2022-07-07T23:59:59Z
         */
        expiration_at?: string | null;
      };
    };
    WalletObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the walletâ€™s record within the Lago system.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the customer within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the customerâ€™s record within the Lago system.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_customer_id: string;
      /**
       * @description The customer external unique identifier (provided by your own application)
       * @example hooli_1234
       */
      external_customer_id: string;
      /**
       * @description The status of the wallet. Possible values are `active` or `terminated`.
       * @example active
       * @enum {string}
       */
      status: "active" | "terminated";
      currency: components["schemas"]["Currency"];
      /**
       * @description The name of the wallet.
       * @example Prepaid
       */
      name?: string;
      /**
       * @description The rate of conversion between credits and the amount in the specified currency. It indicates the ratio or factor used to convert credits into the corresponding monetary value in the currency of the transaction.
       * @example 1.5
       */
      rate_amount: string;
      /**
       * @description The current wallet balance expressed in credits.
       * @example 28.0
       */
      credits_balance: string;
      /**
       * @description The current wallet balance expressed in cents.
       * @example 1000
       */
      balance_cents: number;
      /**
       * @description The number of consumed credits.
       * @example 2.0
       */
      consumed_credits: string;
      /**
       * Format: date-time
       * @description The date of the wallet creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
       * @example 2022-04-29T08:59:51Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @description The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
       * @example null
       */
      expiration_at?: string | null;
      /**
       * Format: date-time
       * @description The date and time of the last balance top-up. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
       * @example 2022-04-29T08:59:51Z
       */
      last_balance_sync_at?: string | null;
      /**
       * Format: date-time
       * @description The date and time of the last credits consumption. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
       * @example 2022-04-29T08:59:51Z
       */
      last_consumed_credit_at?: string | null;
      /**
       * Format: date-time
       * @description The date of terminaison of the wallet. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
       * @example 2022-09-14T16:35:31Z
       */
      terminated_at?: string | null;
    };
    WalletsPaginated: {
      wallets: components["schemas"]["WalletObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    WalletTransactionCreateInput: {
      wallet_transaction: {
        /**
         * Format: uuid
         * @description Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the walletâ€™s record within the Lago system.
         * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
         */
        wallet_id: string;
        /**
         * @description The number of paid credits. Required only if there is no granted credits.
         * @example 20.0
         */
        paid_credits?: string;
        /**
         * @description The number of free granted credits. Required only if there is no paid credits.
         * @example 10.0
         */
        granted_credits?: string;
      };
    };
    WalletTransactionObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the wallet transaction within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet transactionâ€™s record within the Lago system.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the walletâ€™s record within the Lago system.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_wallet_id: string;
      /**
       * @description The status of the wallet transaction. Possible values are `pending` or `settled`.
       * @example settled
       * @enum {string}
       */
      status: "pending" | "settled";
      /**
       * @description The type of transaction. Possible values are `inbound` (increasing the balance) or `outbound` (decreasing the balance).
       * @example inbound
       * @enum {string}
       */
      transaction_type: "inbound" | "outbound";
      /**
       * @description The amount of credits based on the rate and the currency.
       * @example 10.0
       */
      amount: string;
      /**
       * @description The number of credits used in the wallet transaction.
       * @example 100.0
       */
      credit_amount: string;
      /**
       * Format: date-time
       * @description The date when wallet transaction is settled, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
       * @example 2022-04-29T08:59:51Z
       */
      settled_at?: string;
      /**
       * Format: date-time
       * @description The date of the wallet transaction creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
       * @example 2022-04-29T08:59:51Z
       */
      created_at: string;
    };
    WalletTransactions: {
      wallet_transactions: components["schemas"]["WalletTransactionObject"][];
    };
    WalletTransactionsPaginated: components["schemas"]["WalletTransactions"] & {
      meta: components["schemas"]["PaginationMeta"];
    };
    WalletUpdateInput: {
      wallet: {
        /**
         * @description The name of the wallet.
         * @example new_name
         */
        name?: string | null;
        /**
         * Format: date-time
         * @description The date and time that determines when the wallet will expire. It follows the ISO 8601 datetime format and is expressed in Coordinated Universal Time (UTC).
         * @example 2022-07-07T23:59:59Z
         */
        expiration_at?: string | null;
      };
    };
    WebhookEndpoint: {
      webhook_endpoint: components["schemas"]["WebhookEndpointObject"];
    };
    WebhookEndpointCreateInput: {
      webhook_endpoint?: {
        /**
         * @description The URL of the webhook endpoint.
         * @example https://foo.bar
         */
        webhook_url: string;
        /**
         * @description The signature used for the webhook. If no value is passed,
         * @example hmac
         * @enum {string|null}
         */
        signature_algo?: "jwt" | "hmac" | null;
      };
    };
    WebhookEndpointObject: {
      /**
       * Format: uuid
       * @description Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the webhook endpoint's record within the Lago system.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_id: string;
      /**
       * Format: uuid
       * @description Unique identifier assigned to the organization attached to the webhook endpoint within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the organizationâ€™s record within the Lago system.
       * @example 1a901a90-1a90-1a90-1a90-1a901a901a90
       */
      lago_organization_id: string;
      /**
       * @description The name of the wallet.
       * @example Prepaid
       */
      webhook_url: string;
      /**
       * @description The signature algo for the webhook.
       * @example hmac
       * @enum {string}
       */
      signature_algo?: "jwt" | "hmac";
      /**
       * Format: date-time
       * @description The date of the webhook endpoint creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).
       * @example 2022-04-29T08:59:51Z
       */
      created_at: string;
    };
    WebhookEndpointsPaginated: {
      webhook_endpoints: components["schemas"]["WebhookEndpointObject"][];
      meta: components["schemas"]["PaginationMeta"];
    };
    WebhookEndpointUpdateInput: {
      webhook_endpoint?: {
        /**
         * @description The URL of the webhook endpoint.
         * @example https://foo.bar
         */
        webhook_url: string;
        /**
         * @description The signature used for the webhook. If no value is passed,
         * @example hmac
         * @enum {string|null}
         */
        signature_algo?: "jwt" | "hmac" | null;
      };
    };
  };
  responses: {
    /** @description Bad Request error */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ApiErrorBadRequest"];
      };
    };
    /** @description Forbidden */
    Forbidden: {
      content: {
        "application/json": components["schemas"]["ApiErrorForbidden"];
      };
    };
    /** @description Unauthorized error */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ApiErrorUnauthorized"];
      };
    };
    /** @description Not Allowed error */
    NotAllowed: {
      content: {
        "application/json": components["schemas"]["ApiErrorNotAllowed"];
      };
    };
    /** @description Not Found error */
    NotFound: {
      content: {
        "application/json": components["schemas"]["ApiErrorNotFound"];
      };
    };
    /** @description Unprocessable entity error */
    UnprocessableEntity: {
      content: {
        "application/json": components["schemas"]["ApiErrorUnprocessableEntity"];
      };
    };
  };
  parameters: {
    /** @description Unique identifier assigned to the customer in your application. */
    external_customer_id?: string;
    /** @description External subscription ID */
    external_subscription_id?: string;
    /** @description Unique identifier assigned to the invoice within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the invoiceâ€™s record within the Lago system. */
    lago_invoice_id: string;
    /** @description Page number. */
    page?: number;
    /** @description Number of records per page. */
    per_page?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List all add-ons
   * @description This endpoint is used to list all existing add-ons.
   */
  findAllAddOns: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
      };
    };
    responses: {
      /** @description Add-ons */
      200: {
        content: {
          "application/json": components["schemas"]["AddOnsPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create an add-on
   * @description This endpoint is used to create an add-on that can be then attached to a one-off invoice.
   */
  createAddOn: {
    /** @description Add-on payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddOnCreateInput"];
      };
    };
    responses: {
      /** @description Add-on created */
      200: {
        content: {
          "application/json": components["schemas"]["AddOn"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve an add-on
   * @description This endpoint is used to retrieve a specific add-on.
   */
  findAddOn: {
    parameters: {
      path: {
        /** @description Unique code used to identify the add-on. */
        code: string;
      };
    };
    responses: {
      /** @description Add-on */
      200: {
        content: {
          "application/json": components["schemas"]["AddOn"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update an add-on
   * @description This endpoint is used to update an existing add-on.
   */
  updateAddOn: {
    parameters: {
      path: {
        /** @description Unique code used to identify the add-on. */
        code: string;
      };
    };
    /** @description Add-on payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddOnUpdateInput"];
      };
    };
    responses: {
      /** @description Add-on updated */
      200: {
        content: {
          "application/json": components["schemas"]["AddOn"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Delete an add-on
   * @description This endpoint is used to delete an existing add-on.
   */
  destroyAddOn: {
    parameters: {
      path: {
        /** @description Unique code used to identify the add-on. */
        code: string;
      };
    };
    responses: {
      /** @description Add-on deleted */
      200: {
        content: {
          "application/json": components["schemas"]["AddOn"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * List all applied coupons
   * @description This endpoint is used to list all applied coupons. You can filter by coupon status and by customer.
   */
  findAllAppliedCoupons: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
        /** @description The status of the coupon. Can be either `active` or `terminated`. */
        status?: "active" | "terminated";
        /** @description The customer external unique identifier (provided by your own application) */
        external_customer_id?: string;
      };
    };
    responses: {
      /** @description Applied Coupons */
      200: {
        content: {
          "application/json": components["schemas"]["AppliedCouponsPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Apply a coupon to a customer
   * @description This endpoint is used to apply a specific coupon to a customer, before or during a subscription.
   */
  applyCoupon: {
    /** @description Apply coupon payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AppliedCouponInput"];
      };
    };
    responses: {
      /** @description Coupon applied */
      200: {
        content: {
          "application/json": components["schemas"]["AppliedCoupon"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * List all billable metrics
   * @description This endpoint retrieves all existing billable metrics that represent pricing components of your application.
   */
  findAllBillableMetrics: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
      };
    };
    responses: {
      /** @description List of billable metrics */
      200: {
        content: {
          "application/json": components["schemas"]["BillableMetricsPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create a billable metric
   * @description This endpoint creates a new billable metric representing a pricing component of your application.
   */
  createBillableMetric: {
    /** @description Billable metric payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillableMetricCreateInput"];
      };
    };
    responses: {
      /** @description Billable metric created */
      200: {
        content: {
          "application/json": components["schemas"]["BillableMetric"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a billable metric
   * @description This endpoint retrieves an existing billable metric that represents a pricing component of your application. The billable metric is identified by its unique code.
   */
  findBillableMetric: {
    parameters: {
      path: {
        /** @description Code of the existing billable metric. */
        code: string;
      };
    };
    responses: {
      /** @description Billable metric */
      200: {
        content: {
          "application/json": components["schemas"]["BillableMetric"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update a billable metric
   * @description This endpoint updates an existing billable metric representing a pricing component of your application.
   */
  updateBillableMetric: {
    parameters: {
      path: {
        /** @description Code of the existing billable metric. */
        code: string;
      };
    };
    /** @description Billable metric payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillableMetricUpdateInput"];
      };
    };
    responses: {
      /** @description Billable metric updated */
      200: {
        content: {
          "application/json": components["schemas"]["BillableMetric"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Delete a billable metric
   * @description This endpoint deletes an existing billable metric representing a pricing component of your application.
   */
  destroyBillableMetric: {
    parameters: {
      path: {
        /** @description Code of the existing billable metric. */
        code: string;
      };
    };
    responses: {
      /** @description Billable metric deleted */
      200: {
        content: {
          "application/json": components["schemas"]["BillableMetric"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Find a billable metric's groups
   * @description This endpoint retrieves all groups for a billable metric.
   */
  findAllBillableMetricGroups: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
      };
      path: {
        /** @description Code of the existing billable metric. */
        code: string;
      };
    };
    responses: {
      /** @description List of billable metric's groups */
      200: {
        content: {
          "application/json": components["schemas"]["GroupsPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * List all coupons
   * @description This endpoint is used to list all existing coupons.
   */
  findAllCoupons: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
      };
    };
    responses: {
      /** @description Coupons */
      200: {
        content: {
          "application/json": components["schemas"]["CouponsPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create a coupon
   * @description This endpoint is used to create a coupon that can be then attached to a customer to create a discount.
   */
  createCoupon: {
    /** @description Coupon payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponCreateInput"];
      };
    };
    responses: {
      /** @description Coupon created */
      200: {
        content: {
          "application/json": components["schemas"]["Coupon"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a coupon
   * @description This endpoint is used to retrieve a specific coupon.
   */
  findCoupon: {
    parameters: {
      path: {
        /** @description Unique code used to identify the coupon. */
        code: string;
      };
    };
    responses: {
      /** @description Coupon */
      200: {
        content: {
          "application/json": components["schemas"]["Coupon"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update a coupon
   * @description This endpoint is used to update a coupon that can be then attached to a customer to create a discount.
   */
  updateCoupon: {
    parameters: {
      path: {
        /** @description Unique code used to identify the coupon. */
        code: string;
      };
    };
    /** @description Coupon payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponUpdateInput"];
      };
    };
    responses: {
      /** @description Coupon updated */
      200: {
        content: {
          "application/json": components["schemas"]["Coupon"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Delete a coupon
   * @description This endpoint is used to delete a coupon.
   */
  destroyCoupon: {
    parameters: {
      path: {
        /** @description Unique code used to identify the coupon. */
        code: string;
      };
    };
    responses: {
      /** @description Coupon deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Coupon"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * List all credit notes
   * @description This endpoint list all existing credit notes.
   */
  findAllCreditNotes: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
        external_customer_id?: components["parameters"]["external_customer_id"];
      };
    };
    responses: {
      /** @description Credit notes */
      200: {
        content: {
          "application/json": components["schemas"]["CreditNotes"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create a credit note
   * @description This endpoint creates a new credit note.
   */
  createCreditNote: {
    /** @description Credit note payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditNoteCreateInput"];
      };
    };
    responses: {
      /** @description Credit note created */
      200: {
        content: {
          "application/json": components["schemas"]["CreditNote"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a credit note
   * @description This endpoint retrieves an existing credit note.
   */
  findCreditNote: {
    parameters: {
      path: {
        /** @description The credit note unique identifier, created by Lago. */
        lago_id: string;
      };
    };
    responses: {
      /** @description Credit note */
      200: {
        content: {
          "application/json": components["schemas"]["CreditNote"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update a credit note
   * @description This endpoint updates an existing credit note.
   */
  updateCreditNote: {
    parameters: {
      path: {
        /** @description The credit note unique identifier, created by Lago. */
        lago_id: string;
      };
    };
    /** @description Credit note update payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditNoteUpdateInput"];
      };
    };
    responses: {
      /** @description Credit note updated */
      200: {
        content: {
          "application/json": components["schemas"]["CreditNote"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Download a credit note PDF
   * @description This endpoint downloads the PDF of an existing credit note.
   */
  downloadCreditNote: {
    parameters: {
      path: {
        /** @description The credit note unique identifier, created by Lago. */
        lago_id: string;
      };
    };
    responses: {
      /** @description Credit note PDF */
      200: {
        content: {
          "application/json": components["schemas"]["CreditNote"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Void a credit note
   * @description This endpoint voids an existing credit note.
   */
  voidCreditNote: {
    parameters: {
      path: {
        /** @description The credit note unique identifier, created by Lago. */
        lago_id: string;
      };
    };
    responses: {
      /** @description Credit note voided */
      200: {
        content: {
          "application/json": components["schemas"]["CreditNote"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      405: components["responses"]["NotAllowed"];
    };
  };
  /**
   * List all customers
   * @description This endpoint retrieves all existing customers.
   */
  findAllCustomers: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
      };
    };
    responses: {
      /** @description List of customers */
      200: {
        content: {
          "application/json": components["schemas"]["CustomersPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create a customer
   * @description This endpoint creates a new customer.
   */
  createCustomer: {
    /** @description Customer payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerCreateInput"];
      };
    };
    responses: {
      /** @description Customer created or updated */
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a customer
   * @description This endpoint retrieves an existing customer.
   */
  findCustomer: {
    parameters: {
      path: {
        /** @description External ID of the existing customer */
        external_id: string;
      };
    };
    responses: {
      /** @description Customer */
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Delete a customer
   * @description This endpoint deletes an existing customer.
   */
  destroyCustomer: {
    parameters: {
      path: {
        /** @description External ID of the existing customer */
        external_id: string;
      };
    };
    responses: {
      /** @description Customer deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Delete an applied coupon
   * @description This endpoint is used to delete a specific coupon that has been applied to a customer.
   */
  deleteAppliedCoupon: {
    parameters: {
      path: {
        /** @description The customer external unique identifier (provided by your own application) */
        external_customer_id: string;
        /** @description Unique identifier of the applied coupon, created by Lago. */
        applied_coupon_id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["AppliedCoupon"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Get a customer portal URL
   * @description Retrieves an embeddable link for displaying a customer portal.
   *
   * This endpoint allows you to fetch the URL that can be embedded to provide customers access to a dedicated portal
   */
  getCustomerPortalUrl: {
    parameters: {
      path: {
        /** @description External ID of the existing customer */
        external_customer_id: string;
      };
    };
    responses: {
      /** @description Portal URL */
      200: {
        content: {
          "application/json": {
            customer: {
              /**
               * @description An embeddable link for displaying a customer portal
               * @example https://app.lago.com/customer-portal/1234567890
               */
              portal_url: string;
            };
          };
        };
      };
      401: components["responses"]["Unauthorized"];
      403: components["responses"]["Forbidden"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Retrieve customer current usage
   * @description This endpoint enables the retrieval of the usage-based billing data for a customer within the current period.
   */
  findCustomerCurrentUsage: {
    parameters: {
      query: {
        /** @description The unique identifier of the subscription within your application. */
        external_subscription_id: string;
      };
      path: {
        /** @description The customer external unique identifier (provided by your own application). */
        external_customer_id: string;
      };
    };
    responses: {
      /** @description Customer usage */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerUsage"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Retrieve customer past usage
   * @description This endpoint enables the retrieval of the usage-based billing data for a customer within past periods.
   */
  findAllCustomerPastUsage: {
    parameters: {
      query: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
        /** @description The unique identifier of the subscription within your application. */
        external_subscription_id: string;
        /** @description Billable metric code filter to apply to the charge usage */
        billable_metric_code?: string;
        /** @description Number of past billing period to returns in the result */
        periods_count?: number;
      };
      path: {
        /** @description The customer external unique identifier (provided by your own application). */
        external_customer_id: string;
      };
    };
    responses: {
      /** @description Customer past usage */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerPastUsage"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Send usage events
   * @description This endpoint is used for transmitting usage measurement events to either a designated customer or a specific subscription.
   */
  createEvent: {
    /** @description Event payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventInput"];
      };
    };
    responses: {
      /** @description Event received */
      200: {
        content: never;
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Batch multiple events
   * @deprecated
   * @description This endpoint is used for transmitting a batch of usage measurement events to multiple subscriptions for a single customer.
   */
  createBatchEvents: {
    /** @description Batch events payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventBatchInput"];
      };
    };
    responses: {
      /** @description Event received */
      200: {
        content: never;
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Estimate fees for a pay in advance charge
   * @description Estimate the fees that would be created after reception of an event for a billable metric attached to one or multiple pay in advance charges
   */
  eventEstimateFees: {
    /** @description Event estimate payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventEstimateFeesInput"];
      };
    };
    responses: {
      /** @description Fees estimate */
      200: {
        content: {
          "application/json": components["schemas"]["Fees"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a specific event
   * @description This endpoint is used for retrieving a specific usage measurement event that has been sent to a customer or a subscription.
   */
  findEvent: {
    parameters: {
      path: {
        /** @description This field represents the unique identifier sent for this specific event. */
        transaction_id: string;
      };
    };
    responses: {
      /** @description Event */
      200: {
        content: {
          "application/json": components["schemas"]["Event"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * List all fees
   * @description This endpoint is used for retrieving all fees that has been issued.
   */
  findAllFees: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
        external_customer_id?: components["parameters"]["external_customer_id"];
        external_subscription_id?: components["parameters"]["external_subscription_id"];
        /** @description Filter results by feeâ€™s currency. */
        currency?: components["schemas"]["Currency"];
        /** @description The fee type. Possible values are `add-on`, `charge`, `credit` or `subscription`. */
        fee_type?: "charge" | "add_on" | "subscription" | "credit" | "instant_charge";
        /** @description Filter results by the `code` of the billable metric attached to the fee. Only applies to `charge` types. */
        billable_metric_code?: string;
        /** @description Indicates the payment status of the fee. It represents the current status of the payment associated with the fee. The possible values for this field are `pending`, `succeeded`, `failed` and refunded`. */
        payment_status?: "pending" | "succeeded" | "failed" | "refunded";
        /** @description Filter results created after creation date and time in UTC. */
        created_at_from?: string;
        /** @description Filter results created before creation date and time in UTC. */
        created_at_to?: string;
        /** @description Filter results with payment success after creation date and time in UTC. */
        succeeded_at_from?: string;
        /** @description Filter results with payment success after creation date and time in UTC. */
        succeeded_at_to?: string;
        /** @description Filter results with payment failure after creation date and time in UTC. */
        failed_at_from?: string;
        /** @description Filter results with payment failure after creation date and time in UTC. */
        failed_at_to?: string;
        /** @description Filter results with payment refund after creation date and time in UTC. */
        refunded_at_from?: string;
        /** @description Filter results with payment refund after creation date and time in UTC. */
        refunded_at_to?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["FeesPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a specific fee
   * @description This endpoint is used for retrieving a specific fee that has been issued.
   */
  findFee: {
    parameters: {
      path: {
        /** @description Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the feeâ€™s record within the Lago system. */
        lago_id: string;
      };
    };
    responses: {
      /** @description Fee */
      200: {
        content: {
          "application/json": components["schemas"]["Fee"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update a fee
   * @description This endpoint is used for updating a specific fee that has been issued.
   */
  updateFee: {
    parameters: {
      path: {
        /** @description Unique identifier assigned to the fee within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the feeâ€™s record within the Lago system. */
        lago_id: string;
      };
    };
    /** @description Fee payload */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["FeeUpdateInput"];
      };
    };
    responses: {
      /** @description Fee updated */
      200: {
        content: {
          "application/json": components["schemas"]["Fee"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * List all invoices
   * @description This endpoint is used for retrievign all invoices.
   */
  findAllInvoices: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
        external_customer_id?: components["parameters"]["external_customer_id"];
        /** @description Filter invoices starting from a specific date. */
        issuing_date_from?: string;
        /** @description Filter invoices up to a specific date. */
        issuing_date_to?: string;
        /** @description Filter invoices by status. Possible values are `draft` or `finalized`. */
        status?: "draft" | "finalized";
        /** @description Filter invoices by payment status. Possible values are `pending`, `failed` or `succeeded`. */
        payment_status?: "pending" | "failed" | "succeeded";
      };
    };
    responses: {
      /** @description Invoices */
      200: {
        content: {
          "application/json": components["schemas"]["InvoicesPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create a one-off invoice
   * @description This endpoint is used for issuing a one-off invoice.
   */
  createInvoice: {
    /** @description Invoice payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvoiceOneOffCreateInput"];
      };
    };
    responses: {
      /** @description Invoice created */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve an invoice
   * @description This endpoint is used for retrieving a specific invoice that has been issued.
   */
  findInvoice: {
    parameters: {
      path: {
        lago_id: components["parameters"]["lago_invoice_id"];
      };
    };
    responses: {
      /** @description Invoice */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update an invoice
   * @description This endpoint is used for updating an existing invoice.
   */
  updateInvoice: {
    parameters: {
      path: {
        lago_id: components["parameters"]["lago_invoice_id"];
      };
    };
    /** @description Update an existing invoice */
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvoiceUpdateInput"];
      };
    };
    responses: {
      /** @description Invoice updated */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Download an invoice PDF
   * @description This endpoint is used for downloading a specific invoice PDF document.
   */
  downloadInvoice: {
    parameters: {
      path: {
        lago_id: components["parameters"]["lago_invoice_id"];
      };
    };
    responses: {
      /** @description Invoice PDF */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Finalize a draft invoice
   * @description This endpoint is used for finalizing a draft invoice.
   */
  finalizeInvoice: {
    parameters: {
      path: {
        lago_id: components["parameters"]["lago_invoice_id"];
      };
    };
    responses: {
      /** @description Invoice finalized */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Refresh a draft invoice
   * @description This endpoint is used for refreshing a draft invoice.
   */
  refreshInvoice: {
    parameters: {
      path: {
        lago_id: components["parameters"]["lago_invoice_id"];
      };
    };
    responses: {
      /** @description Invoice refreshed */
      200: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Retry an invoice payment
   * @description This endpoint resends an invoice for collection and retry a payment.
   */
  retryPayment: {
    parameters: {
      path: {
        lago_id: components["parameters"]["lago_invoice_id"];
      };
    };
    responses: {
      /** @description Invoice payment retried */
      200: {
        content: never;
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      405: components["responses"]["NotAllowed"];
    };
  };
  /**
   * Update your organization
   * @description This endpoint is used to update your own organization's settings.
   */
  updateOrganization: {
    /** @description Update an existing organization */
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationUpdateInput"];
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * List all plans
   * @description This endpoint retrieves all existing plans.
   */
  findAllPlans: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
      };
    };
    responses: {
      /** @description Plans */
      200: {
        content: {
          "application/json": components["schemas"]["PlansPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create a plan
   * @description This endpoint creates a plan with subscription and usage-based charges. It supports flexible billing cadence (in-advance or in-arrears) and allows for both recurring and metered charges.
   */
  createPlan: {
    /** @description Plan payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanCreateInput"];
      };
    };
    responses: {
      /** @description Plan created */
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a plan
   * @description This endpoint retrieves a specific plan.
   */
  findPlan: {
    parameters: {
      path: {
        /** @description The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance. */
        code: string;
      };
    };
    responses: {
      /** @description Plan */
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update a plan
   * @description This endpoint updates a specific plan with subscription and usage-based charges. It supports flexible billing cadence (in-advance or in-arrears) and allows for both recurring and metered charges.
   */
  updatePlan: {
    parameters: {
      path: {
        /** @description The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance. */
        code: string;
      };
    };
    /** @description Plan payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanUpdateInput"];
      };
    };
    responses: {
      /** @description Plan updated */
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Delete a plan
   * @description This endpoint deletes a specific plan. Note that this plan could be associated with active subscriptions.
   */
  destroyPlan: {
    parameters: {
      path: {
        /** @description The code of the plan. It serves as a unique identifier associated with a particular plan. The code is typically used for internal or system-level identification purposes, like assigning a subscription, for instance. */
        code: string;
      };
    };
    responses: {
      /** @description Plan deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Plan"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * List all subscriptions
   * @description This endpoint retrieves all active subscriptions.
   */
  findAllSubscriptions: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
        /** @description The customer external unique identifier (provided by your own application) */
        external_customer_id?: string;
        /** @description The unique code representing the plan to be attached to the customer. This code must correspond to the code property of one of the active plans. */
        plan_code?: string;
        /** @description If the field is not defined, Lago will return only `active` subscriptions. However, if you wish to fetch subscriptions by different status you can define them in a status[] query param. Available filter values: `pending`, `canceled`, `terminated`, `active`. */
        status?: ("pending" | "canceled" | "terminated" | "active")[];
      };
    };
    responses: {
      /** @description List of subscriptions */
      200: {
        content: {
          "application/json": components["schemas"]["SubscriptionsPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Assign a plan to a customer
   * @description This endpoint assigns a plan to a customer, creating or modifying a subscription. Ideal for initial subscriptions or plan changes (upgrades/downgrades).
   */
  createSubscription: {
    /** @description Subscription payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscriptionCreateInput"];
      };
    };
    responses: {
      /** @description Subscription created */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a subscription
   * @description This endpoint retrieves a specific subscription.
   */
  findSubscription: {
    parameters: {
      path: {
        /** @description External ID of the existing subscription */
        external_id: string;
      };
    };
    responses: {
      /** @description Subscription */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update a subscription
   * @description This endpoint allows you to update a subscription.
   */
  updateSubscription: {
    parameters: {
      path: {
        /** @description External ID of the existing subscription */
        external_id: string;
      };
    };
    /** @description Update an existing subscription */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubscriptionUpdateInput"];
      };
    };
    responses: {
      /** @description Subscription updated */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Terminate a subscription
   * @description This endpoint allows you to terminate a subscription.
   */
  destroySubscription: {
    parameters: {
      query?: {
        /** @description If the field is not defined, Lago will terminate only `active` subscriptions. However, if you wish to cancel a `pending` subscription, please ensure that you include `status=pending` in your request. */
        status?: string;
      };
      path: {
        /** @description External ID of the existing subscription */
        external_id: string;
      };
    };
    responses: {
      /** @description Subscription terminated */
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      405: components["responses"]["NotAllowed"];
    };
  };
  /**
   * List all taxes
   * @description This endpoint retrieves all existing taxes representing a customizable tax rate applicable to either the organization or a specific customer.
   */
  findAllTaxes: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
      };
    };
    responses: {
      /** @description Taxes */
      200: {
        content: {
          "application/json": components["schemas"]["TaxesPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create a tax
   * @description This endpoint creates a new tax representing a customizable tax rate applicable to either the organization or a specific customer.
   */
  createTax: {
    /** @description Tax creation payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaxCreateInput"];
      };
    };
    responses: {
      /** @description Tax created */
      200: {
        content: {
          "application/json": components["schemas"]["Tax"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a Tax
   * @description This endpoint retrieves an existing tax representing a customizable tax rate applicable to either the organization or a specific customer. The tax is identified by its unique code.
   */
  findTax: {
    parameters: {
      path: {
        /** @description The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes. */
        code: string;
      };
    };
    responses: {
      /** @description Tax */
      200: {
        content: {
          "application/json": components["schemas"]["Tax"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update a tax
   * @description This endpoint updates an existing tax representing a customizable tax rate applicable to either the organization or a specific customer.
   */
  updateTax: {
    parameters: {
      path: {
        /** @description The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes. */
        code: string;
      };
    };
    /** @description Tax update payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaxUpdateInput"];
      };
    };
    responses: {
      /** @description Tax updated */
      200: {
        content: {
          "application/json": components["schemas"]["Tax"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Delete a tax
   * @description This endpoint is used to delete a tax.
   */
  destroyTax: {
    parameters: {
      path: {
        /** @description The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes. */
        code: string;
      };
    };
    responses: {
      /** @description Tax deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Tax"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * List all wallets
   * @description This endpoint is used to list all wallets with prepaid credits.
   */
  findAllWallets: {
    parameters: {
      query: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
        /** @description The customer external unique identifier (provided by your own application). */
        external_customer_id: string;
      };
    };
    responses: {
      /** @description Wallets */
      200: {
        content: {
          "application/json": components["schemas"]["WalletsPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create a wallet
   * @description This endpoint is used to create a wallet with prepaid credits.
   */
  createWallet: {
    /** @description Wallet payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletCreateInput"];
      };
    };
    responses: {
      /** @description Wallet created */
      200: {
        content: {
          "application/json": components["schemas"]["Wallet"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a wallet
   * @description This endpoint is used to retrieve an existing wallet with prepaid credits.
   */
  findWallet: {
    parameters: {
      path: {
        /** @description Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the walletâ€™s record within the Lago system. */
        lago_id: string;
      };
    };
    responses: {
      /** @description Wallet */
      200: {
        content: {
          "application/json": components["schemas"]["Wallet"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update a wallet
   * @description This endpoint is used to update an existing wallet with prepaid credits.
   */
  updateWallet: {
    parameters: {
      path: {
        /** @description Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the walletâ€™s record within the Lago system. */
        lago_id: string;
      };
    };
    /** @description Wallet update payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletUpdateInput"];
      };
    };
    responses: {
      /** @description Wallet updated */
      200: {
        content: {
          "application/json": components["schemas"]["Wallet"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Terminate a wallet
   * @description This endpoint is used to terminate an existing wallet with prepaid credits.
   */
  destroyWallet: {
    parameters: {
      path: {
        /** @description Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the walletâ€™s record within the Lago system. */
        lago_id: string;
      };
    };
    responses: {
      /** @description Wallet terminated */
      200: {
        content: {
          "application/json": components["schemas"]["Wallet"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      405: components["responses"]["NotAllowed"];
    };
  };
  /**
   * Top up a wallet
   * @description This endpoint is used to top-up an active wallet.
   */
  createWalletTransaction: {
    /** @description Wallet transaction payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletTransactionCreateInput"];
      };
    };
    responses: {
      /** @description Wallet transaction created */
      200: {
        content: {
          "application/json": components["schemas"]["WalletTransactions"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * List all wallet transactions
   * @description This endpoint is used to list all wallet transactions.
   */
  findAllWalletTransactions: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
        /** @description The status of the wallet transaction. Possible values are `pending` or `settled`. */
        status?: string;
        /** @description The transaction type of the wallet transaction. Possible values are `inbound` (increasing the wallet balance) or `outbound` (decreasing the wallet balance). */
        transaction_type?: string;
      };
      path: {
        /** @description Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the walletâ€™s record within the Lago system. */
        lago_id: string;
      };
    };
    responses: {
      /** @description Wallet transactions */
      200: {
        content: {
          "application/json": components["schemas"]["WalletTransactionsPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Retrieve webhook public key
   * @description This endpoint is used to retrieve the public key used to verify the webhooks signature
   */
  fetchPublicKey: {
    responses: {
      /** @description Public key */
      200: {
        content: {
          "text/plain": string;
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * List all webhook endpoints
   * @description This endpoint is used to list all webhook endpoints.
   */
  findAllWebhookEndpoints: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        per_page?: components["parameters"]["per_page"];
      };
    };
    responses: {
      /** @description WebhookEndpoints */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookEndpointsPaginated"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /**
   * Create a webhook_endpoint
   * @description This endpoint is used to create a webhook endpoint.
   */
  createWebhookEndpoint: {
    /** @description Webhook Endpoint payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookEndpointCreateInput"];
      };
    };
    responses: {
      /** @description Webhook Endpoint created */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookEndpoint"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Retrieve a webhook endpoint
   * @description This endpoint is used to retrieve an existing webhook endpoint.
   */
  findWebhookEndpoint: {
    parameters: {
      path: {
        /** @description Unique identifier assigned to the webhook endpoint within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the webhook endpoint's record within the Lago system. */
        lago_id: string;
      };
    };
    responses: {
      /** @description WebhookEndpoint */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookEndpoint"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * Update a webhook endpoint
   * @description This endpoint is used to update an existing webhook endpoint.
   */
  updateWebhookEndpoint: {
    parameters: {
      path: {
        /** @description Unique identifier assigned to the webhook endpoint within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the webhook endpoint's record within the Lago system. */
        lago_id: string;
      };
    };
    /** @description Webhook Endpoint update payload */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookEndpointUpdateInput"];
      };
    };
    responses: {
      /** @description Webhook Endpoint updated */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookEndpoint"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      422: components["responses"]["UnprocessableEntity"];
    };
  };
  /**
   * Delete a webhook endpoint
   * @description This endpoint is used to delete an existing webhook endpoint.
   */
  destroyWebhookEndpoint: {
    parameters: {
      path: {
        /** @description Unique identifier assigned to the webhook endpoint within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the webhook endpoint's record within the Lago system. */
        lago_id: string;
      };
    };
    responses: {
      /** @description Webhook Endpoint deleted */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookEndpoint"];
        };
      };
      401: components["responses"]["Unauthorized"];
      404: components["responses"]["NotFound"];
      405: components["responses"]["NotAllowed"];
    };
  };
}
